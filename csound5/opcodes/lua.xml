<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" id="lua">
    <title>
        Lua Opcodes
    </title>
    <para>
        The purposes of the Lua opcodes are: 
    </para>
    <orderedlist>
        <listitem><simpara>
            Make it possible to write Csound code in a user-friendly, 
            high-level language with full lexical scoping, structures and 
            classes, and support for functional programming, using 
            LuaJIT (the Lua programming language, implemented with a 
            just-in-time compiler and foreign function interface).
        </simpara></listitem>
        <listitem><simpara>
            Require the installation of no third party software packages, 
            or at least a minimum installation; also, require no build 
            system or external compilation.
        </simpara></listitem>
        <listitem><simpara>
            Run <emphasis>really fast</emphasis>; typically, almost as 
            fast as compiled C code,  and several times faster than 
            user-defined opcodes.
        </simpara></listitem>
    </orderedlist>
    <para>
        Using the Lua opcode family, you can interact with the Lua 
        interpreter and just-in-time compiler (luajit) embedded in Csound 
        as follows:
    </para>
    <orderedlist>
        <listitem>
            <simpara>
                Execute any arbitrary block of Lua code (the <link linkend="lua_exec"><citetitle>lua_exec</citetitle></link> opcode),
            </simpara>
        </listitem>
        <listitem>
            <simpara>
                Define an opcode in Lua taking any number or type of  
                parameters, and returning any number or type of parameters 
                (the <link linkend="lua_opdef"><citetitle>lua_opdef</citetitle>
                </link> opcode),
            </simpara>
        </listitem>
        <listitem>
            <simpara>
                Call a Lua opcode at i-rate (the <link linkend="lua_opcall">
                <citetitle>lua_iopcall</citetitle></link> opcode),
            </simpara>
        </listitem>
        <listitem>
            <simpara>
                Call a Lua opcode at i-rate and k-rate (the <link linkend="lua_opcall">
                <citetitle>lua_ikopcall</citetitle></link> opcods), or
            </simpara>
        </listitem>
        <listitem>
            <simpara>
                Call a Lua opcode at i-rate and a-rate (the <link linkend="lua_opcall">
                <citetitle>lua_iaopcall</citetitle></link> opcode).
            </simpara></listitem>
        </orderedlist>
    <para>
        Lua is Portuguese for "moon." And Lua 
        (<ulink url="http://www.lua.org"><citetitle>http://www.lua.org</citetitle></ulink>) is a 
        lightweight, efficient dynamic programming language, designed for 
        embedding in C/C++ and extending with C/C++. Lua has a 
        stack-based calling mechanism and provides a toolkit of features 
        (tables, metatables, anonymous functions, and closures) with 
        which many styles of object-oriented and functional programming 
        may be implemented. Lua's syntax is only slightly harder than Python's. 
    </para>
    <para>
        Lua is already one of the fastest dynamic languages; yet LuaJIT 
        by Mike Pall (<ulink url="http://luajit.org"><citetitle>http://luajit.org</citetitle></ulink>) 
        goes much further, 
        giving Lua a just-in-time optimizing trace compiler for Intel 
        architectures. LuaJIT includes an efficient foreign function 
        interface (FFI) with the ability to define C arrays, structures, 
        and other types in Lua. The speed of LuaJIT/FFI ranges from 
        several times as fast as Lua, to faster (in some contexts) than 
        optimized C.
    </para>
    <refsect1>
        <!--To add examples, create the csd file in the examples directory, then run:-->
        <!--python csd2docbook.py -f newopcodename.csd-->
        <!--to generate the xml highlighted version used below-->
        <title>
            Example
        </title>
        <para>
            Here is an example of a Lua opcode, implementing a Moog 
            ladder filter. For purposes of comparison, a user-defined 
            opcode and the native Csound opcode that compute the same 
            sound using the same algorithm also are shown, and timed.. 
            The example uses the file <ulink url="examples/luamoog.csd">
            <citetitle>luamoog.csd</citetitle></ulink>.
            <example>
                <title>
                    Example of a Lua opcode.
                </title>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../examples-xml/luamoog.csd.xml"/>
            </example>
        </para>
    </refsect1>
    <bridgehead>
        Credits
    </bridgehead>
    <para>
        Copyright (c) 2011 by Michael Gogins. All rights reserved.
    </para>
</chapter>
