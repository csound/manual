<chapter id="OviewFrontEnds">
  <title>Front Ends</title>
  <para>
    Front ends are programs that provide some form of user interface for Csound. Within these programs, Csound is used to generate sound, and familiarity with Csound code is required in order to use them. Front ends typically add helpful features, such as syntax coloring, graphic widgets, or tools for algorithmic score generation, that are not part of Csound itself. Most of these programs were created by a single person, so some of them are not being maintained. Below is a list (certainly not complete, and perhaps not up to date) of front ends available for Csound.
  </para>
  <para>
  Most often, you'll want to download and install Csound itself before downloading and installing a front end. Some front ends require particular versions of Csound, so if you plan to use a front end, it's recommended that you verify its compatibility before installing Csound.
  </para>
  <bridgehead>CsoundQt</bridgehead>
  <para>
    CsoundQt is a versatile, cross-platform GUI (graphical user interface) which is bundled with the standard Csound distribution. Created and maintained by Andres Cabrera, QuteCsound provides a multi-tabbed editor, graphic widgets for real-time sound control, and an opcode help system that links to this manual. At this writing (2013) CsoundQt is in active development, so the version installed in your system when you install Csound may not be the most current. The most recent version can be found at <ulink url="https://csoundqt.github.io/">https://csoundqt.github.io/</ulink>.
  </para>
  <bridgehead>Blue</bridgehead>
  <para>
    A cross-platform composition-oriented front end written by Steven Yi in Java. The user interface provides a timeline structured somewhat like a digital multitrack, but differs in that timelines can be embedded within timelines (polyObjects). This allows for a compositional organization in time that many users will find intuitive, informative, and flexible. Each instrument and score section in a blue project has its own editing window, which makes organizing large projects easier. Blue can be downloaded at <ulink url="https://blue.kunstmusik.com/">Blue Home Page</ulink>.
  </para>
  <bridgehead>Cabbage</bridgehead>
  <para>
   Cabbage is a Csound frontend that provides users with the means to develop audio plugins and standalone software across the three major operating systems. While Cabbage makes use of underlying plugin technologies such as Steinberg's VST SDK, ASIO, etc, Csound is used to process all incoming and outgoing audio. Cabbage also provides a growing collection of GUI widgets ranging from simple sliders to automatable XY-pads. All GUI widgets in a Cabbage plugin can be controlled via host automation in a plugin host, thereby providing a quick and effective means of automating Csound instrument parameters in both commercial and non-commercial DAWs. Cabbage can be downloaded at <ulink url="https://github.com/rorywalsh/cabbage/">https://github.com/rorywalsh/cabbage/</ulink>.
  </para>
  <bridgehead>WinXound</bridgehead>
  <para>
    WinXound is a free and open-source Front-End GUI Editor with syntax highlighting for CSound 6, CSoundAV,
CSoundAC, with Python and Lua support, developed by Stefano Bonetti.
It runs on Microsoft Windows, Apple Mac OsX and Linux. You can get it at the <ulink url="http://winxound.codeplex.com/">WinXsound Front Page</ulink>.
  </para>
  
  <bridgehead>Winsound</bridgehead>
  <para>
    Winsound was formerly part of the main Csound tree. It is now
    available only as source code. Winsound is a cross-platform FLTK
    port of an early Windows front-end for csound. Some partially
    sighted or unsighted users report success using Winsound with
    text-to-speech software.
  </para>
  </chapter>
  
  <!--
    <title>CsoundAC</title>
    
    <bridgehead>Python Scripting</bridgehead>
    
    <para>You can use CsoundAC as a Python extension module. You
      can do this in a standard Python interpreter, such as Python
      command line or the Idle Python GUI.</para>
    
    <para>To use CsoundAC in a standard Python interpreter, import
      CsoundAC.</para>
    
    <programlisting>
      import CsoundAC</programlisting>
    
    <para>The CsoundAC module automatically creates an instance of
      CppSound named <application>csound</application>, which provides an object-oriented
      interface to the Csound API. In a standard Python interpreter, you can
      load a Csound <filename>.csd</filename> file and perform it like
      this: </para>
      -->

    <!--
    <programlisting>
      C:\Documents and Settings\mkg>python
      Python 2.3.3 (#51, Dec 18 2003, 20:22:39) [MSC v.1200 32 bit (Intel)] on win32
      Type "help", "copyright", "credits" or "license" for more information.
      >>> import CsoundAC
      >>> csound.load("c:/projects/csound5/examples/trapped.csd")
      1
      >>> csound.exportForPerformance()
      1
      >>> csound.perform()
      BEGAN CppSound::perform(5, 988ee0)...
      BEGAN CppSound::compile(5, 988ee0)...
      Using default language
      0dBFS level = 32767.0
      Csound version 5.00 beta (float samples) Jun  7 2004
      libsndfile-1.0.10pre6
      orchname:  temp.orc
      scorename: temp.sco
      orch compiler:
      398 lines read
      instr   1
      instr   2
      instr   3
      instr   4
      instr   5
      instr   6
      instr   7
      instr   8
      instr   9
      instr   10
      instr   11
      instr   12
      instr   13
      instr   98
      instr   99
      sorting score ...
      ... done
      Csound version 5.00 beta (float samples) Jun  6 2004
      displays suppressed
      0dBFS level = 32767.0
      orch now loaded
      audio buffered in 16384 sample-frame blocks
      SFDIR undefined.  using current directory
      writing 131072-byte blks of shorts to test.wav
      WAV
      SECTION 1:
      ENDED CppSound::compile.
      ftable 1:
      ftable 2:
      ftable 3:
      ftable 4:
      ftable 5:
      ftable 6:
      ftable 7:
      ftable 8:
      ftable 9:
      ftable 10:
      ftable 11:
      ftable 12:
      ftable 13:
      ftable 14:
      ftable 15:
      ftable 16:
      ftable 17:
      ftable 18:
      ftable 19:
      ftable 20:
      ftable 21:
      ftable 22:
      new alloc for instr 1:
      B  0.000 ..  1.000 T  1.000 TT  1.000 M:     32.7      0.0
      new alloc for instr 1:
      B  1.000 ..  3.600 T  3.600 TT  3.600 M:    207.6      0.1
      
      ...
      
      B 93.940 .. 94.418 T 98.799 TT281.799 M:    477.6     85.0
      B 94.418 ..100.000 T107.172 TT290.172 M:    118.9     11.5
      end of section 4         sect peak amps:  25950.8  26877.4
      inactive allocs returned to freespace
      end of score.              overall amps:  32204.8  31469.6
      overall samples out of range:        0        0
      0 errors in performance
      782 131072-byte soundblks of shorts written to test.wav WAV
      Elapsed time = 13.469000 seconds.
      ENDED CppSound::perform.
      1
      >>>
    </programlisting>
    -->
    <!--
    <para>The <filename>koch.py</filename> script shows how to use Python
      to do algorithmic composition for Csound. You can use Python
      triple-quoted string literals to hold your Csound files right in your
      script, and assign them to Csound: </para>
    -->

      <!--
    <programlisting>
      csound.setOrchestra('''sr = 44100
      kr = 441
      ksmps = 100
      nchnls = 2
      0dbfs = .1
      instr 1,2,3,4,5 ; FluidSynth General MID
      I; INITIALIZATION
      ; Channel, bank, and program determine the preset, that is, the actual sound.
      ichannel		=			p1
      iprogram		=			p6
      ikey	 		= 			p4
      ivelocity 		= 			p5 + 12
      ijunk6 			= 			p6
      ijunk7			=			p7
      ; AUDIO
      istatus			=			144;
      print			iprogram, istatus, ichannel, ikey, ivelocityaleft, aright
      fluid			"c:/projects/csound5/samples/VintageDreamsWaves-v2.sf2", \\
      iprogram, istatus, ichannel, ikey, ivelocity, 1
      outs 			aleft, arightendin''')
      -->
      
      <!--
      csound.setCommand("csound - -opcode-lib=c:/projects/csound5/fluid.dll \\
      -RWdfo ./koch.wav ./temp.orc ./temp.sco")
      csound.exportForPerformance()
      csound.perform()
      </programlisting>  
     -->

      

