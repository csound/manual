<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="StringsTop">
  <title>Strings</title>
  <para>
    String variables are variables with a name starting with S or gS (for a local or global string variable, respectively), and can store any string with a maximum length defined by the -+max_str_len command line flag (255 characters by default). These variables can be used as input argument to any opcode that exepcts a quoted string constant, and can be manipulated at initialization or performance time with the opcodes listed below.
  </para>
  <para>
    It is also possible to use string p-fields. The string p-field can be used by many orchestra opcodes
    directly, or it can be copied to a string variable first:

    <programlisting>
a1    <emphasis role="opc">diskin2</emphasis> p5, 1</programlisting>

    <programlisting>
Sname <emphasis role="opc">strget</emphasis>  p5
a1    <emphasis role="opc">diskin2</emphasis> Sname, 1</programlisting>

  </para>
  <para>
    Strings within Csound can be expressed using traditional double quotes ("  "), an also using {{ }}. The second method is useful to allow ';' and '$' characters within the string without having to used ASCII codes.
  </para>
  <note>
          <title>Note</title>
          <para>String variables and related opcodes are not available in Csound versions older than 5.00.</para>
  </note>
  <para>
    Strings can also be linked to a number using <link linkend="strset"><citetitle>strset</citetitle></link> and <link linkend="strget"><citetitle>strget</citetitle></link>.
  </para>
  <para>
    Csound 5 also has improvements in parsing string constants. It is possible to specify a multi-line string by enclosing it within {{ and }} instead of the usual double quote characters (note that the length of string constants is not limited, and is not affected by the -+max_str_len option), and the following escape sequences are automatically converted:
    <itemizedlist>
      <listitem>
        <para><emphasis>\a</emphasis> alert bell</para>
      </listitem>
      <listitem>
        <para><emphasis>\b</emphasis> backspace</para>
      </listitem>
      <listitem>
        <para><emphasis>\n</emphasis> new line</para>
      </listitem>
      <listitem>
        <para><emphasis>\r</emphasis> carriage return</para>
      </listitem>
      <listitem>
        <para><emphasis>\t</emphasis> tab</para>
      </listitem>
      <listitem>
        <para><emphasis>\\</emphasis> a single '\' character</para>
      </listitem>
      <listitem>
        <para><emphasis>\nnn</emphasis> the character of which the ASCII code (in octal) is nnn</para>
      </listitem>
    </itemizedlist>
    It can be useful together with the <link linkend="system"><citetitle>system</citetitle></link> opcode:
    <programlisting>
<emphasis role="oblock">instr</emphasis> 1
 <emphasis role="comment">; csound5 lets you make a string with line returns inside double brackets</emphasis>
    <emphasis role="opc">system</emphasis> {{     ps
            date
            cd ~/Desktop
            pwd
            ls -l
            whois csounds.com
        }}
<emphasis role="oblock">endin</emphasis></programlisting>
    And the <link linkend="py"><citetitle>python opcodes</citetitle></link>, among others:
    <programlisting>
<emphasis role="opc">pyruni</emphasis> {{
import random

pool = [(1 + i/10.0) ** 1.2 for i in range(100)]

def get_number_from_pool(n, p):
    if random.random() &lt; p:
        i = int(random.random() * len(pool))
        pool[i] = n
    return random.choice(pool)
}}</programlisting>
  </para>
  <xi:include href="manipulate.xml"/>
  <xi:include href="convert.xml"/>
</chapter>
