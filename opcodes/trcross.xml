<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" id="trcross">
<indexterm id="Indextrcross"><primary>trcross</primary></indexterm>

  <refentryinfo><title>Spectral Processing:Streaming</title></refentryinfo>
  <refmeta>
    <refentrytitle>trcross</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>trcross</refname>
    <refpurpose>
      Streaming partial track cross-synthesis.
    </refpurpose>
  </refnamediv>
  
  <refsect1>
    <title>Description</title>
    <para>
      The <emphasis>trcross</emphasis> opcode takes two inputs containg TRACKS pv streaming signals (as generated,
      for instance by <emphasis>partials</emphasis>) and cross-synthesises them into a single TRACKS stream. Two
      different modes of operation are used: mode 0, cross-synthesis by multiplication of
      the amplitudes of the two inputs and mode 1, cross-synthesis by the substititution of
      the amplitudes of input 1 by the input 2. Frequencies and phases of input 1 are preserved
      in the output. The cross-synthesis is done by matching tracks between the two inputs using
      a 'search interval'. The matching algorithm will look for tracks in the second input that 
      are within the search interval around each track in the first input. This interval can be changed
      at the control rate. Wider search intervals will find more matches.
    </para>
  </refsect1>

  <refsect1>
    <title>Syntax</title>
    <synopsis>fsig <command>trcross</command> fin1, fin2, ksearch, kdepth [, kmode] </synopsis>
  </refsect1>

  <refsect1>
    <title>Performance</title>
      <para>
      <emphasis>fsig</emphasis> -- output pv stream in TRACKS format 
    </para>
    
    <para>
      <emphasis>fin1</emphasis> -- first input pv stream in TRACKS format.
    </para>
  
    <para>
      <emphasis>fin2</emphasis> -- second input pv stream in TRACKS format
    </para>
      
    <para>
      <emphasis>ksearch</emphasis> -- search interval ratio, defining a 'search area'
      around each track of 1st input for matching purposes.
    </para>
      
    <para>
      <emphasis>kdepth</emphasis> -- depth of effect (0-1).
    </para>
      
    <para>
      <emphasis>kmode</emphasis> -- mode of cross-synthesis. 0, multiplication
      of amplitudes (filtering), 1, subsitution of amplitudes of input 1 by
      input 2 (akin to vocoding). Defaults to 0.
    </para>
  </refsect1>

  <refsect1>
    <title>Examples</title>
    <para>
      Here is an example of the trcross opcode. It uses the file <ulink url="examples/trcross.csd"><citetitle>trcross.csd</citetitle></ulink>.
      <example>
        <title>Example of the trcross opcode.</title>
        <para>See the sections <link linkend="UsingRealTime"><citetitle>Real-time Audio</citetitle></link> and <link linkend="CommandFlags"><citetitle>Command Line Flags</citetitle></link> for more information on using command line flags.</para>
          <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../examples-xml/trcross.csd.xml"/>
      </example>
    </para>
    <para>
      The example above shows partial tracking of two ifd-analysis signals, cross-synthesis, 
      followed by the remix of the two parts of the spectrum and resynthesis. 
    </para>
  </refsect1>
 
  <refsect1>
    <title>Credits</title>
    <para>
      <simplelist>
        <member>Author: Victor Lazzarini</member>
        <member>February 2006 </member>
      </simplelist>
    </para>
    <para>New in Csound 5.01</para>
  </refsect1>
</refentry>
