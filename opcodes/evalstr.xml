<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" id="evalstr">
<indexterm id="Indexevalstr"><primary>evalstr</primary></indexterm>
  <refentryinfo><title>Instrument Control:Compilation</title></refentryinfo>
  <refmeta>
    <refentrytitle>evalstr</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>evalstr</refname>
    <refpurpose>
    Evalstrs evaluates a string containing Csound code, returning a value.
    </refpurpose>
  </refnamediv>

  <refsect1>
    <title>Description</title>
    <para>
      Evalstr compiles and runs Csound code and returns a value from the global space (instr 0). This opcode can be
also used to compile new instruments (as compilestr).
    </para>
  </refsect1>

  <refsect1>
    <title>Syntax</title>
    <synopsis>ires <command>evalstr</command> Scode </synopsis>
    <synopsis>kres <command>evalstr</command> Scode, ktrig </synopsis>
  </refsect1>

  <refsect1>
    <title>Initialization</title>
    <para>
      <emphasis><quote>Scode</quote></emphasis> --  a string to be compiled and evaluated.
</para>    

  </refsect1>
<refsect1>
    <title>Performance</title>
   	<para>
      <emphasis><quote>ktrig</quote></emphasis> -- triggers the compilation/evaluation if non-zero.
    </para>

  </refsect1>


  <refsect1>
    <title>Examples</title>
    <para>
      Here is an example of the evalstr opcode in conjunction with return:
      <example>
   <para>   
<programlisting>
ival <emphasis role="op">evalstr</emphasis> "return 2 + 2"
<emphasis role="op">print</emphasis> ival
 </programlisting>
    </para>
      </example>
    </para>
  </refsect1>
  <refsect1>
    <title>Credits</title>
    <para>Author: Victor Lazzarini, 2013 </para>
  </refsect1>
</refentry>
