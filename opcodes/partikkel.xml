<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" id="partikkel">
<indexterm id="IndexPartikkel"><primary>partikkel</primary></indexterm>
  <refentryinfo><title>Signal Generators:Granular Synthesis</title></refentryinfo>
  <refmeta>
    <refentrytitle>partikkel</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>partikkel</refname>
    <refpurpose>
      Granular synthesizer with "per grain" control
      over many of its parameters.  Has a sync input to
      sychronize its internal grain scheduler clock to an external
      clock source.
    </refpurpose>
  </refnamediv>
 
  <refsect1>
    <title>Description</title>
    <para>
      <emphasis>partikkel</emphasis> was conceived after reading Curtis Roads' book
      "Microsound", and the goal was to create an opcode that was
      capable of all time-domain varieties of granular synthesis
      described in this book. The idea being that most of the
      techniques only differ in parameter values, and by having a
      single opcode that can do all varieties of granular synthesis
      makes it possible to interpolate between techniques. Granular synthesis is sometimes dubbed particle
      synthesis, and it was thought apt to name the opcode <emphasis>partikkel</emphasis>
      to distinguish it from other granular opcodes.  
    </para>
    <para>
      Some of the input parameters to <emphasis>partikkel</emphasis> is table numbers,
      pointing to tables where values for the "per grain" parameter
      changes are stored.  <emphasis>partikkel</emphasis> can use single-cycle or complex
      (e.g. sampled sound) waveforms as source waveforms for
      grains. Each grain consists of a mix of 4 source
      waveforms. Individual tuning of the base frequency can be done
      for each of the 4 source waveforms. Frequency modulation inside
      each grain is enabled via an auxillary audio input
      (<emphasis>awavfm</emphasis>). Trainlet synthesis is available, and trainlets can be
      mixed with wavetable based grains. Up to 8 separate audio
      outputs can be used.
    </para>
  </refsect1>

  <refsect1>
    <title>Syntax</title>
    <synopsis>a1 [, a2, a3, a4, a5, a6, a7, a8] <command>partikkel</command> agrainfreq, \
              kdistribution, idisttab, async, kenv2amt, ienv2tab, ienv_attack, \
              ienv_decay, ksustain_amount, ka_d_ratio, kduration, kamp, igainmasks, \
              kwavfreq, ksweepshape, iwavfreqstarttab, iwavfreqendtab, awavfm, \
              ifmamptab, kfmenv, icosine, ktraincps, knumpartials, kchroma, \
              ichannelmasks, krandommask, kwaveform1, kwaveform2, kwaveform3, \
              kwaveform4, iwaveamptab, asamplepos1, asamplepos2, asamplepos3, \
              asamplepos4, kwavekey1, kwavekey2, kwavekey3, kwavekey4, imax_grains \
              [, iopcode_id]</synopsis>
  </refsect1>

  <refsect1>
    <title>Initialization</title>
    <para>
      <emphasis>idisttab</emphasis> -- function table number,
      distribution for random grain displacements over time. The table
      values are interpreted as "displacement amount" scaled by
      1/grainrate. This means that a value of 0.5 in the table will
      displace a grain by half the grainrate period. The table values
      are read randomly, and scaled by <emphasis>kdistribution</emphasis>. For realistic
      stochastic results, it is advisable not to use a too small table
      size, as this limits the amount of possible displacement
      values. This can also be utilized for other purposes, e.g. using
      quantized displacement values to work with controlled time
      displacement from the periodic grain rate. If <emphasis>kdistribution</emphasis> is
      negative, the table values will be read sequentially. A default
      table might be selected by using -1 as the ftable number, for
      <emphasis>idisttab</emphasis> the default uses a zero distribution (no
      displacement). 
    </para>
    <para>
      <emphasis>ienv_attack</emphasis> -- function table number,
      attack shape of grain. Needs extended guard point. A default
      table might be selected by using -1 as the ftable number, for
      <emphasis>ienv_attack</emphasis> the default uses a square window (no enveloping). 
    </para>
    <para>
      <emphasis>ienv_decay</emphasis> -- function table number, decay
      shape of grain. Needs extended guard point. A default table
      might be selected by using -1 as the ftable number, for
      <emphasis>ienv_decay</emphasis> the default uses a square window (no enveloping). 
    </para>
    <para>
      <emphasis>ienv2tab</emphasis> -- function table number,
      additional envelope applied to grain, done after attack and
      decay envelopes. Can be used e.g. for fof formant
      synthesis. Needs extended guard point. A default table might be
      selected by using -1 as the ftable number, for <emphasis>ienv2tab</emphasis> the
      default uses a square window (no enveloping). 
    </para>
    <para>
      <emphasis>icosine</emphasis> -- function table number, must
      contain a cosine, used for trainlets. Table size should be at least 2048 for good quality trainlets.
    </para>
    <para>
      <emphasis>igainmasks</emphasis> -- function table number, gain per
      grain. The sequence of values in the table is as follows: index
      0 is used as a loop start point in reading the values, index 1
      is used as a loop end point. Remaining indices contain gain
      values (normally in range 0 - 1, but other values are
      allowed, negative values will invert phase of waveform inside
      grain) for a sequence of grains, these are read at grain rate
      enabling exact patterns of "gain per grain". The loop start and
      end points are zero based with an origin at index 2, e.g. a loop
      start value of 0 and loop end value of 3 will read indices
      2,3,4,5 in a loop at grain rate. A default table might be
      selected by using -1 as the ftable number, for <emphasis>igainmasks</emphasis> the
      default disables gain masking (all grains are given a gain
      masking value of 1). 
    </para>
    <para>
      <emphasis>ichannelmasks</emphasis> -- function table number, see <emphasis>igainmasks</emphasis>
      for a description of how the values in the table are read. Range
      is 0 to N, where N is the number of output channels minus 1. A
      value of zero will send the grain to audio output 1 from the
      opcode. Fractional values are allowed, e.g. a value of 3.5 will
      mix the grain equally to outputs 4 and 5. The user is
      responsible for keeping the values in range, no range checking
      is done. The opcode will crash with out of range values. A
      default table might be selected by using -1 as the ftable
      number, for <emphasis>ichannelmasks</emphasis> the default disables channel masking
      (all grains are given a channel masking value of 0 and are sent
      to <emphasis>partikkel</emphasis> audio out 1). 
    </para>
    <para>
      <emphasis>iwavfreqstarttab</emphasis> -- function table number,
      see <emphasis>igainmasks</emphasis> for a description of how the values in the table
      are read. Start frequency multiplicator for each grain. Pitch
      will glide from start frequency to end frequency following a
      line or curve as set by <emphasis>ksweepshape</emphasis>. A default table might be
      selected by using -1 as the ftable number, for <emphasis>iwavfreqstarttab</emphasis>
      the default uses a multiplicator of 1, disabling any start
      frequency modification.
    </para>
    <para>
      <emphasis>iwavfreqendtab</emphasis> -- function table number,
      see <emphasis>iwavfreqstarttab</emphasis>. End frequency multiplicator for each
      grain. A default table might be selected by using -1 as the
      ftable number, for <emphasis>iwavfreqendtab</emphasis> the default uses a
      multiplicator of 1, disabling any end frequency modification. 
    </para>
    <para>
      <emphasis>ifmamptab</emphasis> -- function table number,
      see <emphasis>igainmasks</emphasis> for a description of how
      the values in the table are read. Frequency modulation index per
      grain. The signal <emphasis>awavfm</emphasis> will be multiplied by values read from
      this table. A default table might be selected by using -1 as the
      ftable number, for <emphasis>ifmamptab</emphasis> the default uses 1 as the index
      multiplicator, enabling fm for all grains. 
    </para>
    <para>
      <emphasis>iwaveamptab</emphasis> -- function table number, the 
      indices are read in a similar way to what is used for
      <emphasis>igainmasks</emphasis>. Index 0 is used as a loop start point, and index 1
      is used as a loop end point. The rest of the indices are read in
      groups of 5, where each value represent a gain value for each of
      the 4 source waveforms, and the 5th value represent trainlet
      amplitude. A default table might be selected by
      using -1 as the ftable number, for <emphasis>iwaveamptab</emphasis> the default uses
      an equal mix of all 4 source waveforms (each with an amplitude of 0.5) and setting trainlet amp
      to zero.
    </para>
    <para>
      Computation of trainlets can be CPU intensive, and setting
      <emphasis>ktrainamp</emphasis> to zero will skip most of the trainlet
      computations. Trainlets will be normalized to peak (<emphasis>ktrainamp</emphasis>),
      compensating for amplitude variations caused by variations in
      <emphasis>kpartials</emphasis> and <emphasis>kchroma</emphasis>. 
    </para>
    <para>
      <emphasis>imax_grains</emphasis> -- maximum number of grains per k-period. Estimating a large value should not affect performance, exceeding this value will lead to "oldest grains" being deleted.
      </para>
      <para>
      <emphasis>iopcode_id</emphasis> -- the opcode id, linking an
      instance of <emphasis>partikkel</emphasis> to an instance of <link linkend="partikkelsync"><citetitle>partikkelsync</citetitle></link>, the linked <emphasis>partikkelsync</emphasis> will output trigger pulses synchronized to <emphasis>partikkel</emphasis>'s grain maker scheduler. 
      The default value is zero, which means no connection to any <emphasis>partikkelsync</emphasis> instances.
    </para>
  </refsect1>
 
  <refsect1>
    <title>Performance</title>
    <para>
      <emphasis>xgrainfreq</emphasis> -- number of grains per
      second. A value of zero is allowed, and this will defer all
      grain scheduling to the sync input.
    </para>
   <para>
      <emphasis>async</emphasis> -- sync input. Input values are added to the 
      phase value of the internal grain maker clock, enabling tempo synchronization 
      with an external clock source. As this is an a-rate signal, inputs are usually pulses 
      of length 1/<emphasis>sr</emphasis>. Using such pulses, the internal phase value can be "nudged" up or down,
      enabling soft or hard synchronization. Negative input values decrements the internal phase,
      while positive values in the range 0 to 1 increments the internal phase. An input value of 1 
      will always make <emphasis>partikkel</emphasis> generate a grain. 
      If the value remains at 1, the internal grain scheduler clock will pause but any currently
      playing grains will still play to end. 
    </para>
    <para>
      <emphasis>kdistribution</emphasis> -- periodic or stochastic
      distribution of grains, 0 = periodic. Stochastic grain displacement is in the range of <emphasis>kdistribution/grainrate</emphasis> seconds.
      The stochastic distribution profile (random distribution) can be set in the <emphasis>idisttab</emphasis> table. 
      If <emphasis>kdistribution</emphasis> is negative, the result is deterministic time displacement as described by <emphasis>idisttab</emphasis> (sequential read of displacement values). 
      Maximum grain displacement in all cases is limited to 10 seconds, 
      and a grain will keep the values (duration, pitch etc) it was given when it was first generated (before time displacement). 
      Since grain displacement is relative to the grain rate, displacement amount is undefined at 0Hz grain rate and kdistribution is completely disabled in this case.
    </para>
    <para>
      <emphasis>kenv2amt</emphasis> -- amount of enveloping for the
      secondary envelope for each grain. Range 0 to 1, where 0 is no
      secondary enveloping (square window), a value of 0.5 will use an
      interpolation between a square window and the shape set by
      <emphasis>ienv2tab</emphasis>.
    </para>
    <para>
      <emphasis>ksustain_amount</emphasis> -- sustain time as fraction
      of grain duration. I.e. balance between enveloped
      time(attack+decay) and sustain level time. The sustain level is 
      taken from the last value of the <emphasis>ienv_attack</emphasis> ftable.
    </para>
    <para>
      <emphasis>ka_d_ratio</emphasis> -- balance between attack time
      and decay time. For example, with <emphasis>ksustain_amount</emphasis> set to 0.5 and
      <emphasis>ka_d_ratio</emphasis> set to 0.5, the attack envelope of each grain will take 25% of
      the grain duration, full amplitude (sustain) will be held for
      50% of the grain duration, and the decay envelope will take the
      remaining 25% of the grain duration.
    </para>
    <para>
      <emphasis>kduration</emphasis> -- grain duration in milliseconds.
    </para>
    <para>
      <emphasis>kamp</emphasis> -- amplitude scaling of the opcode's
      output. Multiplied by per grain amplitude read from <emphasis>igainmasks</emphasis>.
      Source waveform playback inside grains can consume a significant amount of CPU cycles, 
      especially if grain duration is long so that we have a lot of overlapping grains. 
      Setting kamp to zero will skip waveform playback inside grains (and not generate any sound, obviously). 
      This can be used as a "soft" bypass method if we want to keep the opcode active but silent for some periods of time.
    </para>
    <para>
      <emphasis>kwavfreq</emphasis> -- transposition
      scaling. Multiplied with start and end transposition values read
      from <emphasis>iwavfreqstarttab</emphasis> and <emphasis>iwavfreqendtab</emphasis>.
    </para>
    <para>
      <emphasis>ksweepshape</emphasis> -- transposition sweep shape,
      controls the curvature of the transposition sweep. Range 0
      to 1. Low values will hold the transposition at the start value
      longer and then drop to the end value quickly, high values will
      drop to the end value quickly. A value of 0.5 will give a
      linear sweep. A value of exactly 0 will bypass sweep and only 
      use the start frequency, while a value of exactly 1 will bypass sweep 
      and only use the end frequency. The sweep generator might be slightly 
      inaccurate in hitting the end frequency when using a steep curve and very long grains.
    </para>
    <para>
      <emphasis>awavfm</emphasis> -- audio input for frequency
      modulation inside grain.
    </para>
    <para>
      <emphasis>kfmenv</emphasis> -- function table number, envelope
      for FM modulator signal enabling the modulation index to change
      over the duration of a grain.
    </para>
    <para>
      <emphasis>ktraincps</emphasis> -- trainlet fundamental frequency.
    </para>
    <para>
      <emphasis>knumpartials</emphasis> -- number of partials in trainlets.
    </para>
    <para>
      <emphasis>kchroma</emphasis> -- chroma of trainlets. A value of
      1 give equal amplitude to each partial, higher values will
      reduce the amplitude of lower partials while strengthening the
      amplitude of the higher partials.
    </para>
    <para>
      <emphasis>krandommask</emphasis> -- random masking (muting) of
      individual grains. Range 0 to 1, where a value of 0 will give no
      masking (all grains are played), and a value of 1 will mute all
      grains.
    </para>
    <para>
      <emphasis>kwaveform1</emphasis> -- table number for source waveform 1.
     </para>
    <para>
      <emphasis>kwaveform2</emphasis> -- table number for source waveform 2.
    </para>
    <para>
      <emphasis>kwaveform3</emphasis> -- table number for source waveform 3.
    </para>
    <para>
      <emphasis>kwaveform4</emphasis> -- table number for source waveform 4.
    </para>
    <para>
      <emphasis>asamplepos1</emphasis> -- start position for reading
      source waveform 1 (in range 0..1).
    </para>
    <para>
      <emphasis>asamplepos2</emphasis> -- start position for reading
      source waveform 2.
    </para>
    <para>
      <emphasis>asamplepos3</emphasis> -- start position for reading
      source waveform 3.
    </para>
    <para>
      <emphasis>asamplepos4</emphasis> -- start position for reading
      source waveform 4.
    </para>
    <para>
      <emphasis>kwavekey1</emphasis> -- original key of source
      waveform 1. Can be used to transpose each source waveform
      independently.
    </para>
    <para>
      <emphasis>kwavekey2</emphasis> -- as <emphasis>kwavekey1</emphasis>, but for source
      waveform 2.
    </para>
    <para>
      <emphasis>kwavekey3</emphasis> -- as <emphasis>kwavekey1</emphasis>, but for source
      waveform 3.
    </para>
    <para>
      <emphasis>kwavekey4</emphasis> -- as <emphasis>kwavekey1</emphasis>, but for source waveform 4.
    </para>
  </refsect1>

  <refsect1>
    <title>Examples</title>

    <para>
      Here is an example of the partikkel opcode. It uses the file <ulink url="examples/partikkel.csd"><citetitle>partikkel.csd</citetitle></ulink>.
      <example>
        <title>Example of the partikkel opcode.</title>
        <para>See the sections <link linkend="UsingRealTime"><citetitle>Real-time Audio</citetitle></link> and <link linkend="CommandFlags"><citetitle>Command Line Flags</citetitle></link> for more information on using command line flags.</para>
          <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../examples-xml/partikkel.csd.xml"/>
      </example>
    </para>
    <para>
      Here is another example of the partikkel opcode. It uses the file <ulink url="examples/partikkel-2.csd"><citetitle>partikkel-2.csd</citetitle></ulink>.
      <example>
        <title>Example 2 of the partikkel opcode.</title>
          <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../examples-xml/partikkel-2.csd.xml"/>
      </example>
    </para>
  </refsect1>
 
  <refsect1>
    <title>See Also</title>
    <para><link linkend="fof"><citetitle>fof</citetitle></link>,
      <link linkend="fof2"><citetitle>fof2</citetitle></link>,
      <link linkend="fog"><citetitle>fog</citetitle></link>,
      <link linkend="grain"><citetitle>grain</citetitle></link>,
      <link linkend="grain2"><citetitle>grain2</citetitle></link>,
      <link linkend="grain3"><citetitle>grain3</citetitle></link>,
      <link linkend="granule"><citetitle>granule</citetitle></link>,
      <link linkend="sndwarp"><citetitle>sndwarp</citetitle></link>,
      <link linkend="sndwarpst"><citetitle>sndwarpst</citetitle></link>,
      <link linkend="syncgrain"><citetitle>syncgrain</citetitle></link>,
      <link linkend="syncloop"><citetitle>syncloop</citetitle></link>,
      <link linkend="partikkelsync"><citetitle>partikkelsync</citetitle></link>
    </para>
  </refsect1>
  <refsect1>
    <title>Credits</title>
    <para>
      <simplelist>
        <member>Author: Thom Johansen</member>
        <member>Author: Torgeir Strand Henriksen</member>
        <member>Author: Øyvind Brandtsegg</member>
        <member>April 2007</member>
      </simplelist>
    <para>Examples written by Joachim Heintz and Øyvind Brandtsegg.</para>
    <para>New in version 5.06</para>
    </para>
  </refsect1>
</refentry>
