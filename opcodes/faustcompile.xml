<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" id="faustcompile">
<indexterm id="Indexfaustcompile"><primary>faustcompile</primary></indexterm>
  <refentryinfo><title>Faust Opcodes</title></refentryinfo>
  <refmeta>
    <refentrytitle>faustcompile</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>faustcompile</refname>
    <refpurpose>
      Invokes the just-in-time compiler to produce a instantiable DSP process from a Faust program.
    </refpurpose>
  </refnamediv>

  <refsect1>
    <title>Description</title>
    <para>
      Faustcompile will compile a Faust program from a string, controlled by various arguments.
      Multi-line strings are accepted, using {{  }} to enclose the string.
    </para>
  </refsect1>

  <refsect1>
    <title>Syntax</title>
    <synopsis><command>ihandle faustcompile</command> Scode, Sargs </synopsis>
  </refsect1>

  <refsect1>
    <title>Initialization</title>
    <para>
      <emphasis><quote>Scode</quote></emphasis> --  a string (in double-quotes or enclosed by {{ }}) containing a Faust program.
</para>    
    <para>
      <emphasis><quote>Sargs</quote></emphasis> --  a string (in double-quotes or enclosed by {{ }}) containing Faust compiler args.
</para>  
  </refsect1>

  <refsect1>
    <title>Examples</title>
    <para>
      Here is an example of the faustcompile opcode, with a simple program that mixes two inputs:
      <example>
   <para>   
<programlisting>
ihandle <emphasis role="op">faustcompile</emphasis> "process=+;", "-vec -lv 1"
 </programlisting>
    </para>
      </example>
    </para>
  </refsect1>
  <refsect1>
    <title>Credits</title>
    <para>Author: Victor Lazzarini, 2013 </para>
  </refsect1>
</refentry>
