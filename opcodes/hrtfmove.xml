<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" id="hrtfmove">
<indexterm id="IndexHrtfmove"><primary>hrtfmove</primary></indexterm>
  <refentryinfo><title>Signal Modifiers:Panning and Spatialization</title></refentryinfo>
  <refmeta>
    <refentrytitle>hrtfmove</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>hrtfmove</refname>
    <refpurpose>
      Generates dynamic 3d binaural audio for headphones using magnitude interpolation and phase truncation.
    </refpurpose>
  </refnamediv>

  <refsect1>
    <title>Description</title>
    <para>
      This opcode takes a source signal and spatialises it in the 3 dimensional space around a listener
      by convolving the source with stored head related transfer function (HRTF) based filters.
    </para>
  </refsect1>

  <refsect1>
    <title>Syntax</title>
    <synopsis>aleft, aright <command>hrtfmove</command> asrc, kAz, kElev, ifilel, ifiler [, imode, ifade, isr]</synopsis>
  </refsect1>

  <refsect1>
    <title>Initialization</title>
    <para>
      <emphasis>ifilel </emphasis> -- left HRTF spectral data file
    </para>
    <para>
      <emphasis>ifiler </emphasis> -- right HRTF spectral data file
    </para>
    <note>
      <para>Spectral datafiles (based on the MIT HRTF database) are available in 3 different sampling rates: 44.1, 48 and 96 khz and are labelled accordingly. Input and processing <emphasis>sr</emphasis> should match datafile <emphasis>sr</emphasis>. Files should be in the current directory or the SADIR (see <link linkend="CommandEnvironment"><citetitle>Environment Variables</citetitle></link>).
      </para>
    </note>
 <note>
      <para>
       HRTF Data files for use with 
      <link linkend="hrtfmove"><citetitle>hrtfmove</citetitle></link>,
      <link linkend="hrtfmove2"><citetitle>hrtfmove2</citetitle></link>,
      <link linkend="hrtfstat"><citetitle>hrtfstat</citetitle></link>,
      <link linkend="hrtfearly"><citetitle>hrtfearly</citetitle></link>,
      <link linkend="hrtfreverb"><citetitle>hrtfreverb</citetitle></link>
       were updated for Csound 5.15 and later (the code was updated and is more efficient). Old datafiles are now deprecated.
      </para>
</note>
    <para>
      <emphasis>imode</emphasis> -- optional, default 0 for phase truncation, 1 for minimum phase
    </para>
    <para>
      <emphasis>ifade</emphasis> -- optional, number of processing buffers for phase change crossfade (default 8). Legal range is 1-24. A low value is recommended for complex sources (4 or less: a higher value may make the crossfade audible), a higher value (8 or more: a lower value may make the inconsistency when the filter changes phase values audible) for narrowband sources. Does not effect minimum phase processing.
    </para>
    <note>
      <para>
        Ocassionally fades may overlap (when unnaturally fast/complex trajectories are requested). In this case, a warning will be printed. Use a smaller crossfade or slightly change trajectory to avoid any possible inconsistencies that may arise.
      </para>
    </note>
    <para>
<emphasis>isr</emphasis> - optional, default 44.1kHz, legal values: 44100, 48000 and 96000.
 </para>
 <title>Performance</title>
    <para>
      <emphasis>kAz</emphasis> -- azimuth value in degrees. Positive values represent position on the right, negative values are positions on the left.
    </para>
    <para>
      <emphasis>kElev</emphasis> -- elevation value in degrees. Positive values represent position above horizontal, negative values are positions below horizontal (min -40).
    </para>
    <para>
      Artifact-free user-defined trajectories are made possible using an interpolation algorithm based on spectral
      magnitude interpolation and phase truncation. Crossfades are implemented to minimise/eliminate any inconsistencies
      caused by updating phase values. These crossfades are performed over a user definable number of convolution
      processing buffers. Complex sources may only need to crossfade over 1 buffer; narrow band sources may need several.
      The opcode also offers minimum phase based processing, a more traditional and complex method. In this mode, the hrtf
      filters used are reduced to minimum phase representations and the interpolation process then uses the relationship
      between minimum phase magnitude and phase spectra. Interaural time difference, which is inherent to the phase
      truncation process, is reintroduced in the minimum phase process using variable delay lines.
    </para>
  </refsect1>

  <refsect1>
    <title>Examples</title>
    <para>
      Here is an example of the hrtfmove opcode. It uses the file <ulink url="examples/hrtfmove.csd"><citetitle>hrtfmove.csd</citetitle></ulink>. 
    </para>
    <example>
      <title>Example of the htrfmove opcode.</title>
<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../examples-xml/hrtfmove.csd.xml"/>
    </example>
  </refsect1>

  <refsect1>
    <title>See Also</title>
    <para>
      <link linkend="hrtfmove2"><citetitle>hrtfmove2</citetitle></link>,
      <link linkend="hrtfstat"><citetitle>hrtfstat</citetitle></link>,
      <link linkend="hrtfer"><citetitle>hrtfer</citetitle></link>.
    </para>
            <para> More information on this opcode: <ulink url="http://www.csoundjournal.com/issue9/newHRTFOpcodes.html"><citetitle>http://www.csoundjournal.com/issue9/newHRTFOpcodes.html</citetitle></ulink>  , written by Brian Carty </para>
  </refsect1>

  <refsect1>
    <title>Credits</title>
    <para>
      <simplelist>
        <member>Author: Brian Carty</member>
        <member>Maynooth</member>
        <member>2008</member>
      </simplelist>
    </para>
  </refsect1>
</refentry>
