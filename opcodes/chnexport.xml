<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" id="chnexport">
<indexterm id="Indexchnexport"><primary>chnexport</primary></indexterm>
  <refentryinfo><title>Signal I/O:Software Bus</title></refentryinfo>
  <refmeta>
    <refentrytitle>chnexport</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>chnexport</refname>
    <refpurpose>
      Export a global variable as a channel of the bus.
    </refpurpose>
  </refnamediv>

  <refsect1>
    <title>Description</title>
    <para>
      Export a global variable as a channel of the bus; the channel
      should not already exist, otherwise an init error occurs.
      This opcode is normally called from the orchestra header, and allows
      the host application to read or write orchestra variables directly,
      without having to use
      <link linkend="chnget"><citetitle>chnget</citetitle></link> or
      <link linkend="chnset"><citetitle>chnset</citetitle></link> to copy data.
    </para>
  </refsect1>

  <refsect1>
    <title>Syntax</title>
<synopsis>gival <command>chnexport</command> Sname, imode[, itype, idflt, imin, imax]</synopsis>
<synopsis>gkval <command>chnexport</command> Sname, imode[, itype, idflt, imin, imax]</synopsis>
<synopsis>gaval <command>chnexport</command> Sname, imode</synopsis>
<synopsis>gSval <command>chnexport</command> Sname, imode</synopsis>
  </refsect1>

  <refsect1>
    <title>Initialization</title>
    <para>
      <emphasis>imode</emphasis> -- sum of at least one of 1 for input and
      2 for output.
    </para>
    <para>
      <emphasis>itype</emphasis> (optional, defaults to 0) -- channel subtype
      for control channels only. Possible values are:
      <itemizedlist>
        <listitem>
          <para>
            0: default/unspecified (<emphasis>idflt</emphasis>, <emphasis>imin</emphasis>,
            and <emphasis>imax</emphasis> are ignored)
          </para>
        </listitem>
        <listitem>
          <para>
            1: integer values only
          </para>
        </listitem>
        <listitem>
          <para>
            2: linear scale
          </para>
        </listitem>
        <listitem>
          <para>
            3: exponential scale
          </para>
        </listitem>
      </itemizedlist>
    </para>
    <para>
      <emphasis>idflt</emphasis> (optional, defaults to 0) -- default value,
      for control channels with non-zero <emphasis>itype</emphasis> only.
      Must be greater than or equal to <emphasis>imin</emphasis>, and less than
      or equal to <emphasis>imax</emphasis>.
    </para>
    <para>
      <emphasis>imin</emphasis> (optional, defaults to 0) -- minimum value,
      for control channels with non-zero <emphasis>itype</emphasis> only.
      Must be non-zero for exponential scale (<emphasis>itype</emphasis> = 3).
    </para>
    <para>
      <emphasis>imax</emphasis> (optional, defaults to 0) -- maximum value,
      for control channels with non-zero <emphasis>itype</emphasis> only.
      Must be greater than <emphasis>imin</emphasis>. In the case of exponential
      scale, it should also match the sign of <emphasis>imin</emphasis>.
    </para>

  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
      The channel parameters (<emphasis>imode</emphasis>, <emphasis>itype</emphasis>,
      <emphasis>idflt</emphasis>, <emphasis>imin</emphasis>, and <emphasis>imax</emphasis>)
      are only hints for the host application or external software accessing the bus
      through the API, and do not actually restrict reading from or writing
      to the channel in any way.
    </para>
    <para>
      While the global variable is used as output argument, <emphasis>chnexport</emphasis>
      does not actually change it, and always runs at i-time only. If the variable
      is not previously declared, it is created by Csound with an initial
      value of zero or empty string.
    </para>
  </refsect1>

  <!--<refsect1>
    <title>Performance</title>
    <para>
    </para>
  </refsect1>-->

  <refsect1>
    <title>Example</title>
    <para>
      The example shows the software bus being used as an asynchronous
      control signal to select a filter cutoff.  It assumes that an
      external program that has access to the API is feeding the values.
    </para>

    <informalexample>
      <programlisting>
        <emphasis role="ohdr">sr</emphasis> <emphasis role="op">=</emphasis> 44100
        <emphasis role="ohdr">kr</emphasis> <emphasis role="op">=</emphasis> 100
        <emphasis role="ohdr">ksmps</emphasis> <emphasis role="op">=</emphasis> 1

        gkc <emphasis role="opc">init</emphasis> 1000   <emphasis role="comment">; set default value</emphasis>
        gkc <emphasis role="opc">chnexport</emphasis> "cutoff", 1, 3, <emphasis role="opc">i</emphasis>(gkc), 500, 2000

        <emphasis role="oblock">instr</emphasis>   1
           a1   <emphasis role="opc">oscil</emphasis>     p4, p5, 100
           a2   <emphasis role="opc">lowpass2</emphasis>  a1, gkc, 200
                <emphasis role="opc">out</emphasis>       a2
        <emphasis role="oblock">endin</emphasis>
      </programlisting>
    </informalexample>

  </refsect1>

  <refsect1>
    <title>Credits</title>
    <para>
      <simplelist>
        <member>Author: Istvan Varga</member>
        <member>2005</member>
      </simplelist>
    </para>
  </refsect1>
</refentry>
