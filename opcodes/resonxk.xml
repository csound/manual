<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" id="resonxk">
<indexterm id="IndexResonxk"><primary>resonxk</primary></indexterm>
  <refentryinfo><title>Signal Modifiers:Standard Filters:Control</title></refentryinfo>
  <refmeta>
    <refentrytitle>resonxk</refentrytitle>
  </refmeta>



  <refnamediv>
    <refname>resonxk</refname>
    <refpurpose>
     Control signal resonant filter stack.
          </refpurpose>
  </refnamediv>
  
  <refsect1>
    <title>Description</title>
    <para>
	<emphasis>resonxk</emphasis> is equivalent to a group of resonk filters, with the same arguments, serially connected. Using a stack of a larger number of filters allows a sharper cutoff.
    </para>
  </refsect1>
  <refsect1>
    <title>Syntax</title>
    <synopsis>kres <command>resonxk</command> ksig, kcf, kbw[, inumlayer, iscl, istor]</synopsis>
  </refsect1>
  
   <refsect1>
    <title>Initialization</title>
    <para>
      <emphasis>inumlayer</emphasis> - number of elements of filter stack. Default value is 4. Maximum value is 10
    </para>
    <para>
      <emphasis>iscl</emphasis> (optional, default=0) - coded scaling factor for resonators. A value of 1 signifies a peak response factor of 1, i.e. all frequencies other than kcf are attenuated in accordance with the (normalized) response curve. A value of 2 raises the response factor so that its overall RMS value equals 1. (This intended equalization of input and output power assumes all frequencies are physically present; hence it is most applicable to white noise.) A zero value signifies no scaling of the signal, leaving that to some later adjustment (see balance). The default value is 0.
    </para>
    <para>
      <emphasis>istor</emphasis> (optional, default=0) -- initial disposition of internal data space. Since filtering incorporates a feedback loop of previous output, the initial status of the storage space used is significant. A zero value will clear the space; a non-zero value will allow previous information to remain. The default value is 0.
    </para>

  </refsect1>
 
  <refsect1>
    <title>Performance</title>
    <para>
      <emphasis>kres</emphasis> - output signal
    </para>
    <para>
      <emphasis>ksig</emphasis> - input signal
    </para>
    <para>
      <emphasis>kcf</emphasis> -  the center frequency of the filter, or frequency position of the peak response.
    </para>
    <para>
      <emphasis>kbw</emphasis> - bandwidth of the filter (the Hz difference between the upper and lower half-power points)
    </para>

     <para><emphasis>resonxk</emphasis> is a lot faster than using individual instances in Csound orchestra of the old opcodes, because only one initialization and 'k' cycle are needed at a time, and the audio loop falls enterely inside the cache memory of processor.
     </para>
  </refsect1>

  <refsect1>
    <title>Examples</title>
    <para>
      Here is an example of the resonxk opcode. It uses the file <ulink url="examples/resonxk.csd"><citetitle>resonxk.csd</citetitle></ulink>.
      <example>
        <title>Example of the resonxk opcode.</title>
        <para>See the sections <link linkend="UsingRealTime"><citetitle>Real-time Audio</citetitle></link> and <link linkend="CommandFlags"><citetitle>Command Line Flags</citetitle></link> for more information on using command line flags.</para>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../examples-xml/resonxk.csd.xml"/>
      </example>
    </para>
  </refsect1>

  <refsect1>
    <title>Credits</title>
    <para>Written by Gabriel Maldonado.</para>
    <para>New in Csound 5 (Previously available only on CsoundAV)</para>
  </refsect1>
</refentry>
