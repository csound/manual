<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" id="space">
<indexterm id="IndexSpace"><primary>space</primary></indexterm>
  <refentryinfo><title>Signal Modifiers:Panning and Spatialization</title></refentryinfo>
  <refmeta>
    <refentrytitle>space</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>space</refname>
    <refpurpose>
      Distributes an input signal among 4 channels using cartesian coordinates.
    </refpurpose>
  </refnamediv>
 
  <refsect1>
    <title>Description</title>
    <para>
      <emphasis>space</emphasis> takes an input signal and distributes it among 4 channels using Cartesian xy coordinates to calculate the balance of the outputs. The xy coordinates can be defined in a separate text file and accessed through a Function statement in the score using <link linkend="GEN28"><citetitle>Gen28</citetitle></link>, or they can be specified using the optional <emphasis>kx, ky</emphasis> arguments. The advantages to the former are:
      <orderedlist>
        <listitem>
          <para>A graphic user interface can be used to draw and edit the trajectory through the Cartesian plane</para>
        </listitem>

        <listitem>
          <para>The file format is in the form time1 X1 Y1 time2 X2 Y2 time3 X3 Y3 allowing the user to define a time-tagged trajectory</para>
        </listitem>
      </orderedlist>
    </para>

    <para>
      <emphasis>space</emphasis> then allows the user to specify a time pointer (much as is used for <link linkend="pvoc"><citetitle>pvoc</citetitle></link>, <link linkend="lpread"><citetitle>lpread</citetitle></link> and some other units) to have detailed control over the final speed of movement.
    </para>
  </refsect1>
 
  <refsect1>
    <title>Syntax</title>
    <synopsis>a1, a2, a3, a4  <command>space</command> asig, ifn, ktime, kreverbsend, kx, ky</synopsis>
  </refsect1>
 
  <refsect1>
    <title>Initialization</title>
    <para>
      <emphasis>ifn</emphasis> -- number of the stored function created using <link linkend="GEN28"><citetitle>Gen28</citetitle></link>. This function generator reads a text file which contains sets of three values representing the xy coordinates and a time-tag for when the signal should be placed at that location. The file should look like:
      <literallayout>
  0       -1       1
  1        1       1
  2        4       4
  2.1     -4      -4
  3       10     -10
  5      -40       0
      </literallayout>
    </para>

    <para>
      If that file were named <quote>move</quote> then the <emphasis>Gen28</emphasis> call in the score would like:
      <literallayout>
  f1 0 0 28 "move"
      </literallayout>
    </para>

    <para>
      <emphasis>Gen28</emphasis> takes 0 as the size and automatically allocates memory. It creates values to 10 milliseconds of resolution. So in this case there will be 500 values created by interpolating X1 to X2 to X3 and so on, and Y1 to Y2 to Y3 and so on, over the appropriate number of values that are stored in the function table. In the above example, the sound will begin in the left front, over 1 second it will move to the right front, over another second it move further into the distance but still in the right front, then in just 1/10th of a second it moves to the left rear, a bit distant. Finally over the last .9 seconds the sound will move to the right rear, moderately distant, and it comes to rest between the two left channels (due west!), quite distant. Since the values in the table are accessed through the use of a time-pointer in the <emphasis>space</emphasis> unit, the actual timing can be made to follow the file's timing exactly or it can be made to go faster or slower through the same trajectory. If you have access to the GUI that allows one to draw and edit the files, there is no need to create the text files manually. But as long as the file is ASCII and in the format shown above, it doesn't matter how it is made!
    </para>

    <note>
      <title>Important</title>
      <para>
        If <emphasis>ifn</emphasis> is 0, then <emphasis>space</emphasis> will take its values for the xy coordinates from <emphasis>kx</emphasis> and <emphasis>ky</emphasis>.
      </para>
    </note>
  </refsect1>
 
  <refsect1>
    <title>Performance</title>
    <para>
      The configuration of the xy coordinates in space places the signal in the following way:
      <itemizedlist>
        <listitem>
           <para>a1 is -1, 1</para>
        </listitem>

        <listitem>
           <para>a2 is 1, 1</para>
        </listitem>

        <listitem>
           <para>a3 is -1, -1</para>
        </listitem>

        <listitem>
           <para>a4 is 1, -1</para>
        </listitem>
      </itemizedlist>
    </para>

    <para>
      This assumes a loudspeaker set up as a1 is left front, a2 is right front, a3 is left back, a4 is right back. Values greater than 1 will result in sounds being attenuated, as if in the distance. <emphasis>space</emphasis> considers the speakers to be at a distance of 1; smaller values of xy can be used, but <emphasis>space</emphasis> will not amplify the signal in this case. It will, however balance the signal so that it can sound as if it were within the 4 speaker space. x=0, y=1, will place the signal equally balanced between left and right front channels, x=y=0 will place the signal equally in all 4 channels, and so on. Although there must be 4 output signals from <emphasis>space</emphasis>, it can be used in a 2 channel orchestra. If the xy's are kept so that y&gt;=1, it should work well to do panning and fixed localization in a stereo field.
    </para>

    <para>
      <emphasis>asig</emphasis> -- input audio signal.
    </para>

    <para>
      <emphasis>ktime</emphasis> -- index into the table containing the xy coordinates. If used like:
      <literallayout>
  ktime           <emphasis>line</emphasis>  0, 5, 5
  a1, a2, a3, a4  <emphasis>space</emphasis> asig, 1, ktime, ...
      </literallayout>
    </para>

    <para>
      with the file <quote>move</quote> described above, the speed of the signal's movement will be exactly as described in that file. However:
      <literallayout>
  ktime           <emphasis>line</emphasis>  0, 10, 5
      </literallayout>
    </para>

    <para>
      the signal will move at half the speed specified. Or in the case of:
      <literallayout>
  ktime           <emphasis>line</emphasis>  5, 15, 0
      </literallayout>
    </para>

    <para>
      the signal will move in the reverse direction as specified and 3 times slower! Finally:
      <literallayout>
  ktime           <emphasis>line</emphasis>  2, 10, 3
      </literallayout>
    </para>

    <para>
      will cause the signal to move only from the place specified in line 3 of the text file to the place specified in line 5 of the text file, and it will take 10 seconds to do it.
    </para>

    <para>
      <emphasis>kreverbsend</emphasis> -- the percentage of the direct signal that will be factored along with the distance as derived from the xy coordinates to calculate signal amounts that can be sent to reverb units such as <emphasis>reverb</emphasis>, or <emphasis>reverb2</emphasis>.
    </para>

    <para>
      <emphasis>kx, ky</emphasis> -- when <emphasis>ifn</emphasis> is 0, <emphasis>space</emphasis> and <emphasis>spdist</emphasis> will use these values as the xy coordinates to localize the signal.
    </para>
  </refsect1>
 
    <refsect1>
    <title>Examples</title>
    <para>
      Here is an example of the space opcode. It uses the file <ulink url="examples/space_quad.csd"><citetitle>space_quad.csd</citetitle></ulink>.
      <example>
        <title>Example of the space opcode.</title>
        <para>See the sections <link linkend="UsingRealTime"><citetitle>Real-time Audio</citetitle></link> and <link linkend="CommandFlags"><citetitle>Command Line Flags</citetitle></link> for more information on using command line flags.</para>
          <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../examples-xml/space_quad.csd.xml"/>

      In the above example, the signal, <emphasis>asig</emphasis>, is moved according to the data in Function #1 indexed by <emphasis>ktime</emphasis>. <emphasis>space</emphasis> sends the appropriate amount of the signal internally to <emphasis>spsend</emphasis>. The outputs of the <emphasis>spsend</emphasis> are added to global accumulators in a common Csound style and the global signals are used as inputs to the reverb units in a separate instrument.

      </example>
    </para>
    <para>
      <emphasis>space</emphasis> can be useful for quad and stereo panning as well as fixed placed of sounds anywhere between two loudspeakers. Below is an example of the fixed placement of sounds in a stereo field using xy values from the score instead of a function table. It uses the file <ulink url="examples/space_stereo.csd"><citetitle>space_stereo.csd</citetitle></ulink>.
      <example>

        <title>Second example of the space opcode.</title>
          <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../examples-xml/space_stereo.csd.xml"/>
      </example>
    </para>
    <para>
      <link linkend="spdist"><citetitle>spdist</citetitle></link> demonstrates an example of a simple intuitive use of the distance values to simulate Doppler shift.
          </para>
  </refsect1>

  <refsect1>
    <title>See Also</title>
    <para>
      <link linkend="spdist"><citetitle>spdist</citetitle></link>,
      <link linkend="spsend"><citetitle>spsend</citetitle></link>
    </para>
  </refsect1>

  <refsect1>
    <title>Credits</title>
    <para>
      <simplelist>
        <member>Author: Richard Karpen</member>
        <member>Seattle, WA USA</member>
        <member>1998</member>
      </simplelist>
    </para>

    <para>New in Csound version 3.48</para>
  </refsect1>
</refentry>
