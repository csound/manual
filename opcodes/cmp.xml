<!--Change refentry id and indexterm id-->
<refentry id="cmp">
  <indexterm id="IndexCmp"><primary>cmp</primary></indexterm>
  <!--Make sure the category below is a valid one! See categories.py-->
  <refentryinfo><title>Signal Modifiers:Comparators and Accumulators</title></refentryinfo>
  <refmeta>
    <refentrytitle>cmp</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>cmp</refname>
    <refpurpose>
      Compares audio signals or arrays
    </refpurpose>
  </refnamediv>
  <refsect1>
    <title>Description</title>
    <para>Plugin opcode in emugens.</para>
    <para>
      Compares audio signals or arrays, sample by sample or value by value
      All comparison operations are possible: `&lt; `&lt;=, >, >=, ==, !=
    </para>
    <para>
      An audio signal can be compared against another audio signal, or
      against a scalar (i- or k-value).

      <programlisting>
aOut cmp aL, ">", aR
aOut cmp aIn, ">=", 0.5
aOut cmp aIn, "`&lt;=", kthreshold
      </programlisting>
    </para>
    <para>
      An array can be compared against another array, against a scalar,
      or checked to be within the range of two scalars. All operations
      are available for i- and k- arrays
      <programlisting>
        kOut[] cmp kIn[], ">=", kx
        kOut[] cmp kA[], "==", kB[]
        kOut[] cmp 0.5, "`&lt;", kIn[], "`&lt;=", 1
      </programlisting>
    </para>
  </refsect1>

  <refsect1>
    <title>Syntax</title>
    <!--    Please keep this below ~70 characters by using backslashes to avoid overflow in the pdf version-->
    <synopsis>aout <command>cmp</command> a1, S_operator, a2</synopsis>
    <synopsis>aout <command>cmp</command> a1, S_operator, kb</synopsis>
    <synopsis>kOut[] <command>cmp</command> kA[], S_operator, kb</synopsis>
    <synopsis>kOut[] <command>cmp</command> kA[], S_operator, kB[]</synopsis>

    <synopsis>kOut[] <command>cmp</command> k1, S_operator1, kIn[], S_operator2, k2</synopsis>
  </refsect1>

  <refsect1>
    <title>Initialization</title>
    <para>
      <emphasis>S_operator</emphasis> Math operator, one of ">", ">=", "`&lt;",
      "`&lt;=", "=="
    </para>
  </refsect1>
  
  <refsect1>
    <title>Performance</title>
    <!--    First list all input and output performance parameters-->
    <para><emphasis>a1 / a2</emphasis> -- Input signals</para>
    <para><emphasis>kb / ib</emphasis> -- Scalar term</para>
    <para><emphasis>kA[] / kB[]</emphasis> -- array inputs</para>
    
    
    <para>
    Some example usages:
      <programlisting>
aout cmp aL, ">", aR      ; aout = aL > aR for every sample
aout cmp aL, ">=", aR
aout cmp aL, "`&lt;", aR
aout cmp aL, "`&lt;=", aR
aout cmp aL, "==", aR
kOut[] cmp kA, ">=", kb   ; kA is an array
      </programlisting>
    </para>
  </refsect1>
  <refsect1>
    <!--To add examples, create the csd file in the examples directory, then run:-->
    <!--python csd2docbook.py -f newopcodename.csd-->
    <!--to generate the xml highlighted version used below-->
    <title>Examples</title>
    <para>
      Here is an example of the cmp opcode. It uses the file <ulink url="examples/cmp.csd"><citetitle>cmp.csd</citetitle></ulink>.
      <example>
        <title>Example of the cmp opcode.</title>
        <xi:include href="examples-xml/cmp.csd.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
      </example>
    </para>
  </refsect1>
  
      <refsect1>
        <title>See also</title>
        <para><link linkend="MathArtLogic"><citetitle>Arithmetic and Logic Operations</citetitle></link></para>
    </refsect1>

  <refsect1>
    <!--  And put your name and other relevant information here-->
    <title>Credits</title>
    <para>By: &nameeduardo; 2017</para>
  </refsect1>

  <!--Now remember to add a link from the appropriate category in the Opcode Overview.-->
  <!--Add the entity to manual.xml-->
  <!--Add the entity reference in the appropriate place in opcodes  op.xml-->
  <!--And you're set! Maybe delete the comments as well...-->

</refentry>
