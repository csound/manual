<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" id="modmatrix">
<indexterm id="IndexModmatrix"><primary>modmatrix</primary></indexterm>
  <refentryinfo><title>Miscellaneous</title></refentryinfo>
  <refmeta>
    <refentrytitle>modmatrix</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>modmatrix</refname>
    <refpurpose>
      Modulation matrix opcode with optimizations for sparse matrices.
    </refpurpose>
  </refnamediv>
 
  <refsect1>
    <title>Description</title>
    <para>
      The opcode can be used to let a large number of k-rate modulator
      variables modulate a large number of k-rate parameter variables,
      with arbitrary scaling of each modulator-to-parameter
      connection.  Csound ftables are used to hold both the input
      (parameter)  variables, the modulator variables, and the scaling
      coefficients. Output variables are written to another Csound ftable.
    </para>
  </refsect1>

  <refsect1>
    <title>Syntax</title>
    <synopsis><command>modmatrix</command> iresfn, isrcmodfn, isrcparmfn, imodscale, inum_mod, \\
inum_parm, kupdate</synopsis>
  </refsect1>

  <refsect1>
    <title>Initialization</title>
    <para>
      <emphasis>iresfn</emphasis> --  ftable number for the parameter output variables
    </para>
    <para>
      <emphasis>isrcmodfn</emphasis> -- ftable number for the modulation source variables
    </para>
    <para>
      <emphasis>isrcparmfn</emphasis> -- ftable number for the parameter input variables
    </para>
    <para>
      <emphasis>imodscale</emphasis> -- scaling/routing coefficient
      matrix. This is also a csound ftable, used as a matrix of
      inum_mod rows and inum_parm columns.
    </para>
    <para>
      <emphasis>inum_mod</emphasis> -- number of modulation variables
    </para>
    <para>
      <emphasis>inum_parm</emphasis> -- number of parmeter (input and
      output) variables.
    </para>
    <para>
    The arguments <emphasis>inum_mod</emphasis>
    and <emphasis>inum_parm</emphasis> do not have to be set to
    power-of-two values.
    </para>
  </refsect1>
 
  <refsect1>
    <title>Performance</title>
    <para>
      <emphasis>kupdate</emphasis> -- flag to update the scaling
      coefficients. When the flag is set to a nonzero value, the
      scaling coefficients are read directly from the imodscale
      ftable. When the flag is set to zero, the scaling coefficients
      are scanned, and an optimized scaling matrix stored internally
      in the opcode.
    </para>
    <para>
      For each modulator in <emphasis>isrcmodfn</emphasis>, scale it
      with the coefficient (in <emphasis>imodscale</emphasis>)
      determining to what degree it should influence each
      parameter. Then sum all modulators for each parameter and add
      the resulting modulator value to the input parameter value read from
      <emphasis>iscparmfn</emphasis>. Finally, write the output
      parameter values to table <emphasis>iresfn</emphasis>.
    </para>
    <para>
      The following tables give insight into the processing performed
      by the modmatrix opcode, for a simplified example using 3
      parameter and 2 modulators. Letâ€™s call the parameters
      "cps1", "cps2", and "cutoff", and
      the modulators "lfo1" and "lfo2".
    </para>
    <para>
      The input variables may at a given point in time have these
      values:
  <table id="modmatrix-table1" frame="all" colsep="1">
    <tgroup cols="4">
      <thead>
        <row>
          <entry/>
          <entry>cps1</entry>
          <entry>cps2</entry>
          <entry>cutoff</entry>        </row>
      </thead>

      <tbody>
        <row>
          <entry><emphasis>isrcparmfn</emphasis></entry>
          <entry>400</entry>
          <entry>800</entry>
          <entry>3</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
    </para> 
    <para>
    </para> 
    <para>
      ... while the modulator variables have these values:
  <table id="modmatrix-table2" frame="all" colsep="1">
    <tgroup cols="3">
      <thead>
        <row>
          <entry/>
          <entry>lfo1</entry>
          <entry>lfo2</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry><emphasis>isrcmodfn</emphasis></entry>
          <entry>0.5</entry>
          <entry>-0.2</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
    </para> 
    <para>
      The scaling/routing coefficients used:
  <table id="modmatrix-table3" frame="all" colsep="1">
    <tgroup cols="4">
      <thead>
        <row>
          <entry><emphasis>imodscale</emphasis></entry>
          <entry>cps1</entry>
          <entry>cps2</entry>
          <entry>cutoff</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry><emphasis>lfo1</emphasis></entry>
          <entry>40</entry>
          <entry>0</entry>
          <entry>-2</entry>
        </row>
        <row>
          <entry><emphasis>lfo2</emphasis></entry>
          <entry>-50</entry>
          <entry>100</entry>
          <entry>3</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
    </para> 
    <para>
      ... and the resulting output values:
  <table id="modmatrix-table4" frame="all" colsep="1">
    <tgroup cols="4">
      <thead>
        <row>
          <entry/>
          <entry>cps1</entry>
          <entry>cps2</entry>
          <entry>cutoff</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry><emphasis>iresfn</emphasis></entry>
          <entry>430</entry>
          <entry>780</entry>
          <entry>1.4</entry>
        </row>
        <row>
          <entry><emphasis>lfo2</emphasis></entry>
          <entry>-50</entry>
          <entry>100</entry>
          <entry>3</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
    </para>
    <para> 
      The output value for "cps1" is calculated as
      400+(0.5*40)+(-0.2*-50), similarly for "cps2"
      800+(0.5*0)+(-0.2*100), and for cutoff: 3+(0.5*-2)+(-0.2*3) 
    </para> 
    <para>
      The imodscale ftable may be specified in the score like this:
      <programlisting>f1  0  8  -2  200 0 2 50 300 -1.5</programlisting> 
    </para> 
    <para>
       Or more conveniently using <link linkend="ftgen"><citetitle>ftgen</citetitle></link> in the orchestra:
      <programlisting>gimodscale ftgen 0, 0, 8, -2, 200, 0, 2, 50, 300, -1.5</programlisting> 
    </para>


    <para>
      Obviously, the parameter and modulator variables need not be
      static values, and similarly, the scaling routing coefficient
      table may be continuously rewritten using opcodes
      like <link linkend="tablew"><citetitle>tablew</citetitle></link>. 
    </para> 

  </refsect1>

 
  <refsect1>
    <title>Examples</title>

    <para>
      Here is an example of the modmatrix opcode. It uses the file <ulink url="examples/modmatrix.csd"><citetitle>modmatrix.csd</citetitle></ulink>.
      <example>
        <title>Example of the modmatrix opcode.</title>
        <para>See the sections <link linkend="UsingRealTime"><citetitle>Real-time Audio</citetitle></link> and <link linkend="CommandFlags"><citetitle>Command Line Flags</citetitle></link> for more information on using command line flags.</para>
          <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../examples-xml/modmatrix.csd.xml"/>
      </example>
    </para>
  </refsect1>

  <refsect1>
    <title>See Also</title>
    <para>
      <link linkend="linearalgebraopcodes"><citetitle>Linear Algebra
      Opcodes</citetitle></link>, 
      <link linkend="vectorial"><citetitle>Vectorial
      Opcodes</citetitle></link>, 
      <link linkend="tablew"><citetitle>tablew</citetitle></link>.
    </para>
  </refsect1>

  <refsect1>
    <title>Credits</title>
    <para>By:</para>
    <para>Oeyvind Brandtsegg and Thom Johansen</para>
    <para>New in version 5.12</para>
  </refsect1>

</refentry>
