<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" id="pycall">
<indexterm id="IndexPyCall"><primary>pycall</primary></indexterm>
  <refentryinfo><title>Python Opcodes</title></refentryinfo>
  <refmeta>
    <refentrytitle>pycall Opcodes</refentrytitle>
  </refmeta>
  
  <refnamediv>
    <refname>pycall</refname>
    <refpurpose>Invoke the specified Python callable at
      k-time and i-time (i suffix), passing the given arguments. The call is
      perfomed in the global environment, and the result (the returning
      value) is copied into the Csound output variables specified. 
    </refpurpose>
  </refnamediv>
  <refsect1>
    <title>Syntax</title>
<synopsis>                                        <command>pycall</command>   "callable", karg1, ...</synopsis>
<synopsis>kresult                                 <command>pycall1</command>  "callable", karg1, ...</synopsis>
<synopsis>kresult1, kresult2                      <command>pycall2</command>  "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3                           <command>pycall3</command>  "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3, kr4                      <command>pycall4</command>  "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3, kr4, kr5                 <command>pycall5</command>  "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3, kr4, kr5, kr6            <command>pycall6</command>  "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3, kr4, kr5, kr6, kr7       <command>pycall7</command>  "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3, kr4, kr5, kr6, kr7, kr8  <command>pycall8</command>  "callable", karg1, ...</synopsis>

<synopsis>                                        <command>pycallt</command>   ktrigger, "callable", karg1, ...</synopsis>
<synopsis>kresult                                 <command>pycall1t</command>  ktrigger, "callable", karg1, ...</synopsis>
<synopsis>kresult1, kresult2                      <command>pycall2t</command>  ktrigger, "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3                           <command>pycall3t</command>  ktrigger, "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3, kr4                      <command>pycall4t</command>  ktrigger, "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3, kr4, kr5                 <command>pycall5t</command>  ktrigger, "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3, kr4, kr5, kr6            <command>pycall6t</command>  ktrigger, "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3, kr4, kr5, kr6, kr7       <command>pycall7t</command>  ktrigger, "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3, kr4, kr5, kr6, kr7, kr8  <command>pycall8t</command>  ktrigger, "callable", karg1, ...</synopsis>

<synopsis>                                        <command>pycalli</command>   "callable", karg1, ...</synopsis>
<synopsis>iresult                                 <command>pycall1i</command>  "callable", iarg1, ...</synopsis>
<synopsis>iresult1, iresult2                      <command>pycall2i</command>  "callable", iarg1, ...</synopsis>
<synopsis>ir1, ir2, ir3                           <command>pycall3i</command>  "callable", iarg1, ...</synopsis>
<synopsis>ir1, ir2, ir3, ir4                      <command>pycall4i</command>  "callable", iarg1, ...</synopsis>
<synopsis>ir1, ir2, ir3, ir4, ir5                 <command>pycall5i</command>  "callable", iarg1, ...</synopsis>
<synopsis>ir1, ir2, ir3, ir4, ir5, ir6            <command>pycall6i</command>  "callable", iarg1, ...</synopsis>
<synopsis>ir1, ir2, ir3, ir4, ir5, ir6, ir7       <command>pycall7i</command>  "callable", iarg1, ...</synopsis>
<synopsis>ir1, ir2, ir3, ir4, ir5, ir6, ir7, ir8  <command>pycall8i</command>  "callable", iarg1, ...</synopsis>

<synopsis><command>pycalln</command>   "callable", nresults, kresult1, ..., kresultn, karg1, ...</synopsis>
<synopsis><command>pycallni</command>  "callable", nresults, iresult1, ..., iresultn, iarg1,  ...</synopsis>

<synopsis>                                        <command>pylcall</command>   "callable", karg1, ...</synopsis>
<synopsis>kresult                                 <command>pylcall1</command>  "callable", karg1, ...</synopsis>
<synopsis>kresult1, kresult2                      <command>pylcall2</command>  "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3                           <command>pylcall3</command>  "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3, kr4                      <command>pylcall4</command>  "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3, kr4, kr5                 <command>pylcall5</command>  "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3, kr4, kr5, kr6            <command>pylcall6</command>  "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3, kr4, kr5, kr6, kr7       <command>pylcall7</command>  "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3, kr4, kr5, kr6, kr7, kr8  <command>pylcall8</command>   "callable", karg1, ...</synopsis>

<synopsis>                                        <command>pylcallt</command>   ktrigger, "callable", karg1, ...</synopsis>
<synopsis>kresult                                 <command>pylcall1t</command>  ktrigger, "callable", karg1, ...</synopsis>
<synopsis>kresult1, kresult2                      <command>pylcall2t</command>  ktrigger, "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3                           <command>pylcall3t</command>  ktrigger, "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3, kr4                      <command>pylcall4t</command>  ktrigger, "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3, kr4, kr5                 <command>pylcall5t</command>  ktrigger, "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3, kr4, kr5, kr6            <command>pylcall6t</command>  ktrigger, "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3, kr4, kr5, kr6, kr7       <command>pylcall7t</command>  ktrigger, "callable", karg1, ...</synopsis>
<synopsis>kr1, kr2, kr3, kr4, kr5, kr6, kr7, kr8  <command>pylcall8t</command>  ktrigger, "callable", karg1, ...</synopsis>

<synopsis>                                        <command>pylcalli</command>   "callable", karg1, ...</synopsis>
<synopsis>iresult                                 <command>pylcall1i</command>  "callable", iarg1, ...</synopsis>
<synopsis>iresult1, iresult2                      <command>pylcall2i</command>  "callable", iarg1, ...</synopsis>
<synopsis>ir1, ir2, ir3                           <command>pylcall3i</command>  "callable", iarg1, ...</synopsis>
<synopsis>ir1, ir2, ir3, ir4                      <command>pylcall4i</command>  "callable", iarg1, ...</synopsis>
<synopsis>ir1, ir2, ir3, ir4, ir5                 <command>pylcall5i</command>  "callable", iarg1, ...</synopsis>
<synopsis>ir1, ir2, ir3, ir4, ir5, ir6            <command>pylcall6i</command>  "callable", iarg1, ...</synopsis>
<synopsis>ir1, ir2, ir3, ir4, ir5, ir6, ir7       <command>pylcall7i</command>  "callable", iarg1, ...</synopsis>
<synopsis>ir1, ir2, ir3, ir4, ir5, ir6, ir7, ir8  <command>pylcall8i</command>  "callable", iarg1, ...</synopsis>

<synopsis><command>pylcalln</command>   "callable", nresults, kresult1, ..., kresultn, karg1, ...</synopsis>
<synopsis><command>pylcallni</command>  "callable", nresults, iresult1, ..., iresultn, iarg1, ...</synopsis>
  </refsect1>

  <refsect1>
    <title>Description</title>
    <para>This family of opcodes call the specified Python callable at
      k-time and i-time (i suffix), passing the given arguments. The call is
      perfomed in the global environment and the result (the returning
      value) is copied into the Csound output variables specified.</para>
    <para>They pass any number of parameters which are cast to float
      inside the Python interpreter.</para>
    <para>The <emphasis>pycall</emphasis>/<emphasis>pycalli</emphasis>, <emphasis>pycall1</emphasis>/<emphasis>pycall1i</emphasis> ... <emphasis>pycall8</emphasis>/<emphasis>pycall8i</emphasis>
      opcodes can accomodate for a number of results ranging from 0 to 8
      according to their numerical prefix (0 is omitted).</para>
    <para>The <emphasis>pycalln</emphasis>/<emphasis>pycallni</emphasis> opcodes can accomodate for any number of
      results: the callable name is followed by the number of output
      arguments, then come the list of Csound output variable and the list
      of parameters to be passed.</para>
    <para>The returning value of the callable must be <literal>None</literal> for <emphasis>pycall</emphasis> or
      <emphasis>pycalli</emphasis>, a float for <emphasis>pycall1i</emphasis> or <emphasis>pycall1i</emphasis> and a tuple (with proper
      size) of floats for the <emphasis>pycall2</emphasis>/<emphasis>pycall2i</emphasis> ... <emphasis>pycall8</emphasis>/<emphasis>pycall8i</emphasis> and
      <emphasis>pycalln</emphasis>/<emphasis>pycallni</emphasis> opcodes.</para>
  </refsect1>
  <refsect1>
    <title>Examples</title>
    <example>
      <title>Calling a C or Python function</title>
      <para>Supposing we have previously defined or imported a function
        named <literal>get_number_from_pool</literal> as:</para>

<programlisting>
from random import random, choice

# a pool of 100 numbers
pool = [i ** 1.3 for i in range(100)]

def get_number_from_pool(n, p):
    # substitute an old number with the new number?
    if random() &lt; p:
        i = choice(range(len(pool)))
        pool[i] = n

    # return a random number from the pool
    return choice(pool)</programlisting>

<para>then the following orchestra code</para>

<programlisting>
k2   <emphasis role="opc">pycall1</emphasis> "get_number_from_pool", k1, p6</programlisting>

<para>would set <emphasis>k2</emphasis> randomly from a pool of numbers changing in
time. You can pass new pools elements and control the change rate from
the orchestra.</para>

</example>

<example>
<title>Calling a Function Object</title>

<para>A more generic implementation of the previous example makes use
of a simple function object:</para>

<programlisting>
from random import random, choice

class GetNumberFromPool:
    def __init__(self, e, begin=0, end=100, step=1):
        self.pool = [i ** e for i in range(begin, end, step)]

    def __call__(self, n, p):
        # substitute an old number with the new number?
        if random() &lt; p:
            i = choice(range(len(pool)))
            pool[i] = n

        # return a random number from the pool
        return choice(pool)

get_number_from_pool1 = GetNumberFromPool(1.3)
get_number_from_pool2 = GetNumberFromPool(1.5, 50, 250, 2)</programlisting>

<para>Then the following orchestra code:</para>

<programlisting>
k2   <emphasis role="opc">pycall1</emphasis> "get_number_from_pool1", k1, p6
k4   <emphasis role="opc">pycall1</emphasis> "get_number_from_pool2", k3, p7</programlisting>

    <para>would set <emphasis>k2</emphasis> and <emphasis>k4</emphasis> randomly from a pool of numbers changing in
time. You can pass new pools elements (here <emphasis>k1</emphasis> and <emphasis>k3</emphasis>) and control the
change rate (here <emphasis>p6</emphasis> and <emphasis>p7</emphasis>) from the orchestra.</para>

    <para>As you can see in the first snippet, you can customize the
initialization of the pool as well as create several pools.</para>

  </example>
  </refsect1>
  <refsect1>
    <title>Credits</title>
    <para>Copyright (c) 2002 by Maurizio Umberto Puxeddu. All rights
      reserved. Portions copyright (c) 2004 and 2005 by Michael Gogins. This
      document has been updated Sunday 25 July 2004 and 1 February 2005 by
      Michael Gogins.</para>
  </refsect1>
</refentry>
