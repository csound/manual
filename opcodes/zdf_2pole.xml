
<refentry id="zdf_2pole">
<indexterm id="IndexZdf_2pole"><primary>zdf_2pole</primary></indexterm>
  <refentryinfo><title>Signal Modifiers:Standard Filters</title></refentryinfo>
  <refmeta>
    <refentrytitle>zdf_2pole</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>zdf_2pole</refname>
    <refpurpose>
      Zero-delay feedback implementation of 2 pole filter. 
    </refpurpose>
  </refnamediv>
  
  <refsect1>
    <title>Description</title>
    <para>
      Zero-delay feedback implementation of a 2 pole (12 dB/oct) filter. Offers low-pass (default), high-pass, and allpass output modes.
    </para>
  </refsect1>

  <refsect1>
    <title>Syntax</title>
    <synopsis>asig <command>zdf_2pole</command> ain, xcf, xQ [, kmode, istor]</synopsis>
  </refsect1>

  <refsect1>
    <title>Initialization</title>
      <para>
      <emphasis>istor</emphasis> --initial disposition of internal data space.
      Since filtering incorporates a feedback loop of previous output, the
      initial status of the storage space used is significant.  A zero value
      will clear the space; a non-zero value will allow previous information to
      remain. The default value is 0.
    </para>
	  
  </refsect1>
  
  <refsect1>
    <title>Performance</title>
	    <para>
      <emphasis>asig</emphasis> -- output signal.
    </para>
    <para>
      <emphasis>ain</emphasis> -- input signal.
    </para>
    <para>
      <emphasis>xcf</emphasis> -- filter cutoff frequency (i-, k-, or a-rate).
    </para>
    <para>
      <emphasis>xQ</emphasis> -- filter Q value (i-, k-, or a-rate). Range 0.5-25.0.
    </para>
    <para>
      <emphasis>kmode</emphasis> -- filter output type. The default value is 0. 
      The output mode may be one of the following. 

      <itemizedlist>
        <listitem><para>0 - low-pass</para></listitem>
        <listitem><para>1 - high-pass</para></listitem>
        <listitem><para>2 - band-pass</para></listitem>
        <listitem><para>3 - unity-gain band-pass</para></listitem>
        <listitem><para>4 - notch</para></listitem>
        <listitem><para>5 - allpass</para></listitem>
        <listitem><para>6 - peak</para></listitem>
      </itemizedlist>

    </para>

  </refsect1>
  
  <refsect1>
    <title>Examples</title>
    <para>
      Here is an example of the zdf_2pole opcode. It uses the file <ulink url="examples/zdf_2pole.csd"><citetitle>zdf_2pole.csd</citetitle></ulink>.
      <example>
        <title>Example of the zdf_2pole opcode.</title>
          <xi:include href="examples-xml/zdf_2pole.csd.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
      </example>
    </para>
  </refsect1>

  <refsect1>
    <title>References</title>
    <para> This filter is based on the work of Will Pirkle that employs Vadim
      Zavalishin's work with bilinear tranforms to create topology-preserving
      transform (TPT) implementations of analog filters.</para>

    <para>
      <orderedlist>
        <listitem>
          <para>
            Pirkle, Will. Designing Software Synthesizer Plug-ins in C++: For 
            RackAFX, VST3, and Audio Units. CRC Press, 2014.
          </para>
        </listitem>
        <listitem>
          <para>
            Pirkle, Will. AN-4:Â Virtual Analog (VA) Filter Implementation. 2013.
          </para>
        </listitem>
        <listitem>
          <para>
          Zavalishin, Vadim. "The Art of VA filter design." Native Instruments, 2012.
          </para>
        </listitem>
      </orderedlist>
    </para>
  </refsect1>
 
     <refsect1>
        <title>See also</title>
        <para><link linkend="SigmodStandard"><citetitle>Zero-delay Feedback Filters (Virtual Analog)</citetitle></link></para>
    </refsect1>
	
  <refsect1>
    <title>Credits</title>
    <para>
      <simplelist>
        <member>Author: &namesteven;</member>
        <member>April 2017</member>
      </simplelist>
    </para>
    <para>New in Csound 6.09.0</para>
  </refsect1>
</refentry>
