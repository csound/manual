<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" id="faustgen">
<indexterm id="Indexfaustgen"><primary>faustgen</primary></indexterm>
  <refentryinfo><title>Faust Opcodes</title></refentryinfo>
  <refmeta>
    <refentrytitle>faustgen</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>faustgen</refname>
    <refpurpose>
      Compiles, Instantiates and runs a compiled Faust program.
    </refpurpose>
  </refnamediv>

  <refsect1>
    <title>Description</title>
    <para>
      Faustgen will invoke the just-in-time compiler, instantiate and run a Faust program.
    </para>
  </refsect1>

  <refsect1>
    <title>Syntax</title>
    <synopsis><command>ihandle,a1[,a2,...] faustgen</command> SCode[,ain1,...] </synopsis>
  </refsect1>

  <refsect1>
    <title>Initialization</title>
    <para>
      <emphasis><quote>Scode</quote></emphasis> --  a string containing a Faust program.
</para>    
    <para>
      <emphasis><quote>ihandle</quote></emphasis> -- a handle to the Faust DSP instance, which can be used to access
its controls with faustctl.
</para>  
  </refsect1>

  <refsect1>
    <title>Performance</title>
   	<para>
      <emphasis><quote>ain1,...</quote></emphasis> -- input signals
    </para>
	<para>
      <emphasis><quote>a1,...</quote></emphasis> -- output signals
    </para>
  </refsect1>

  <refsect1>
    <title>Examples</title>
    <para>
      Here is an example of the faustgen opcode, with a simple program that mixes two inputs:
      <example>
   <para>   
<programlisting>
idsp,a1 <emphasis role="op">faustgen</emphasis> "process=+;",ain1,ain2
 </programlisting>
    </para>
      </example>
    </para>
  </refsect1>
  <refsect1>
    <title>Credits</title>
    <para>Author: Victor Lazzarini, 2013 </para>
  </refsect1>
</refentry>
