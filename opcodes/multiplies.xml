
<refentry id="multiplies">
<indexterm id="IndexAst"><primary>&ast;</primary></indexterm>
  <refentryinfo><title>Mathematical Operations:Arithmetic and Logic Operations</title></refentryinfo>
  <refmeta>
    <refentrytitle>&ast;</refentrytitle>
  </refmeta>


 
  <refnamediv>
    <refname>&ast;</refname>

    <refpurpose>
      Multiplication operator.
          </refpurpose>
  </refnamediv>
 
  <refsect1>
    <title>Description</title>
    <para>
      Arithmetic operators perform operations of change-sign (negate), don't-change-sign, logical AND logical OR, add, subtract, multiply and divide. Note that a value or an expression may fall between two of these operators, either of which could take it as its left or right argument, as in
      <literallayout>
a + b * c.
      </literallayout>
    </para>

    <para>
      In such cases three rules apply:
    </para>

    <para>
      1. &ast; and <emphasis>&sol;</emphasis> bind to their neighbors more strongly than &plus; and &minus;. Thus the above expression is taken as
      <literallayout>  
a + (b * c)
      </literallayout>
      with &ast; taking b and c and then &plus; taking a and b &ast; c.
    </para>

    <para>
      2. <emphasis>&plus;</emphasis> and <emphasis>&minus;</emphasis> bind more strongly than &amp;&amp;, which in turn is stronger than &verbar;&verbar;:
      <literallayout>  
a &amp;&amp; b - c &verbar;&verbar; d
      </literallayout>
      is taken as
      <literallayout>  
(a &amp;&amp; (b - c)) &verbar;&verbar; d
      </literallayout>
    </para>

    <para>
      3. When both operators bind equally strongly, the operations are done left to right:
      <literallayout>  
a - b - c
      </literallayout>
      is taken as
      <literallayout>  
(a - b) - c
      </literallayout>
    </para>

    <para>
      Parentheses may be used as above to force particular groupings.
    </para>
  </refsect1>

  <refsect1>
    <title>Syntax</title>
    <synopsis>a <command>&ast;</command>  b  (no rate restriction)</synopsis>

    <para>
      where the arguments <emphasis>a</emphasis> and <emphasis>b</emphasis> may be further expressions.
    </para>
  </refsect1>

  <refsect1>
    <title>Arguments</title>
    <para>
      The arguments of &ast; can be scalar values or k-rate one
      dimensional arrays (vectors), or any combination.  If one of the
      arguments is an array, so is the value.
    </para>
  </refsect1>

  <refsect1>
    <title>Examples</title>
    <para>
      Here is an example of the &ast; operator. It uses the file <ulink url="examples/multiplies.csd"><citetitle>multiplies.csd</citetitle></ulink>.

      <example>
        <title>Example of the &ast; operator.</title>

        

        <para>See the sections <link linkend="UsingRealTime"><citetitle>Real-time Audio</citetitle></link> and <link linkend="CommandFlags"><citetitle>Command Line Flags</citetitle></link> for more information on using command line flags.</para>
          <xi:include href="examples-xml/multiplies.csd.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
      </example>

      Its output should include a line like this:
      <screen>

base amplitude * rising expon output = 0.8 * 0.010000
base amplitude * rising expon output = 0.8 * 0.012589
..........
base amplitude * rising expon output = 0.8 * 0.794328
base amplitude * rising expon output = 0.8 * 0.998466</screen>
    </para>
  </refsect1>
  
      <refsect1>
        <title>See also</title>
        <para><link linkend="MathArtLogic"><citetitle>Arithmetic and Logic Operations</citetitle></link></para>
    </refsect1>

  <refsect1>
    <title>Credits</title>
    <para>Arithmetic on vectors is new in version 6.00</para>
  </refsect1>

</refentry>
