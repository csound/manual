<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" id="CscoreEvents">
  <title>Events, Lists, and Operations</title>

  <para>
    An event in <emphasis>Cscore</emphasis> is equivalent to one statement of a <emphasis>standard numeric score</emphasis> or a time-warped score (the format in which Csound writes a sorted score -- see any score.srt), and is stored internally in time-warped format. It is important to note that when <emphasis>Cscore</emphasis> is used in standalone-mode, it cannot understand any of the non-numeric "conveniences" that Csound allows in the input score format. Therefore, scores making use of features such as carry, ramp, expressions, and others will have to either be sorted first with the <emphasis>scsort</emphasis> utility or used with a modified <emphasis>Csound</emphasis> executable that contains the user's <emphasis>Cscore</emphasis> program. Score opcodes with macro arguments (r, m, n, and {}) are not understood.
  </para>

  <para>
Score events are each read in from an existing score file and stored in a C structure. The structures main components are an opcode and an array of pfield values. <emphasis>Cscore</emphasis> handles reading the events and storing them in memory for you. The format of the structure starts as follows:
  </para>

  <para>
    <informalexample>
      <programlisting>
typedef struct {
     CSHDR h;        /* space-managing header   */
     char  *strarg;  /* address of optional string argument */
     char  op;       /* opcode-t, w, f, i, a, s or e */
     short pcnt;
     MYFLT p2orig;   /* unwarped p2, p3   */
     MYFLT p3orig;
     MYFLT p[1];     /* array of pfields p0, p1, p2 ... */
} EVENT;</programlisting>
    </informalexample>
  </para>

  <para>
MYFLT is either the C type <emphasis>float</emphasis> or <emphasis>double</emphasis> depending on how your copy of the Csound library was compiled.  You should just declare any floating-point variables as MYFLT in your user program for compatibility.
  </para>

  <para>
    Any <emphasis>Cscore</emphasis> function that creates, reads, or copies an event will return a pointer to the storage structure holding the event data. The event pointer can be used to access any component of the structure, in the form of <emphasis>e-&gt;op</emphasis> or <emphasis>e-&gt;p[n]</emphasis>. Each newly stored event will give rise to a new pointer, and a sequence of new events will generate a sequence of distinct pointers that must themselves be stored. Groups of event pointers are stored in an event list, which has its own structure:
  </para>

  <para>
    <informalexample>
      <programlisting>
typedef struct {
     CSHDR  h;
     int nslots;    /* max events in this event list  */
     int nevents;   /* number of events present  */
     EVENT *e[1];   /* array of event pointers e0, e1, e2.. */
} EVLIST;</programlisting>
    </informalexample>
  </para>

  <para>
    Any Cscore function that creates or modifies a list will return a pointer to the new list. The list pointer can be used to access any of its component event pointers, in the form of <emphasis>a-&gt;e[n]</emphasis>. Event pointers and list pointers are thus primary tools for manipulating the data of a score file. Pointers and lists of pointers can be copied and reordered without modifying the data values they refer to. This means that notes and phrases can be copied and manipulated from a high level of control. Alternatively, the data within an event or group of events can be modified without changing the event or list pointers. The <emphasis>Cscore</emphasis> API functions enable scores to be created and manipulated in this way.
  </para>

  <para>
With Csound 5, the names of all of the <emphasis>Cscore</emphasis> API functions have changed to be more explicit.  In addition, each function now requires a pointer to a CSOUND object as its first argument.  The structure of the CSOUND object is unimportant (and indeed cannot be modified in a user program).  How to obtain this CSOUND pointer will be shown in the next section.  The <emphasis>Cscore</emphasis> functions and data structures are available in the <filename>cscore.h</filename> header file, which you must include in your program code before you can you use them.
  </para>

  <para>
The names of the <emphasis>Cscore</emphasis> functions specify whether they operate on single events or event lists.  In the following summary of available function calls, some simple naming conventions are used:
  </para>

  <para>
    <informalexample>
      <programlisting>
The symbol cs is a pointer to a CSOUND object (CSOUND *);
The symbols e, f are pointers to events (notes);
The symbols a, b are pointers to lists (arrays) of such events;
The symbol n is an integer parameter of type int;
"..." indicates a string parameter (either a constant or variable of type char *);
The symbol fp is a score input stream file pointer (FILE *);
  
calling syntax                                  description
--------------                                  -----------
/* Functions for working with single events */
e = cscoreCreateEvent(cs, n);                   create a blank event with n pfields
e = cscoreDefineEvent(cs, "...");               defines an event as per the character string ...
e = cscoreCopyEvent(cs, f);                     make a new copy of event f
e = cscoreGetEvent(cs);                         read the next event in the score input file
    cscorePutEvent(cs, e);                      write event e to the score output file
    cscorePutString(cs, "...");       write the string-defined event to score output
  
/* Functions for working with event lists */
a = cscoreListCreate(cs, n);                    create an empty event list with n slots
a = cscoreListAppendEvent(cs, a, e);            append event e to list a
a = cscoreListAppendStringEvent(cs, a, "...");  append a string-defined event to list a;
a = cscoreListCopy(cs, b);                      copy the list b (but not the events)
a = cscoreListCopyEvents(cs, b);                copy the events of b, making a new list
a = cscoreListGetSection(cs);                   read all events from score input, up to next s or e
a = cscoreListGetNext(cs, nbeats);              read next nbeats beats from score input (nbeats is MYFLT)
a = cscoreListGetUntil(cs, beatno);             read all events from score input up to beat beatno (MYFLT) 
a = cscoreListSeparateF(cs, b);                 separate the f statements from list b into list a
a = cscoreListSeparateTWF(cs, b);               separate the t,w &amp; f statements from list b into list a
a = cscoreListAppendList(cs, a, b);             append the list b onto the list a
a = cscoreListConcatenate(cs, a, b);            concatenate (append) the list b onto the list a (same as previous)
    cscoreListSort(cs, a);                      sort the list a into chronological order by p[2]
n = cscoreListCount(cs, a);                     returns the number of events in list a
a = cscoreListExtractInstruments(cs, b, "..."); extract notes of instruments ... (no new events)
a = cscoreListExtractTime(cs, b, from, to);     extract notes of time-span, creating new events (from and to are MYFLT)
    cscoreListPut(cs, a);                       write the events of list a to the score output file
    cscoreListPlay(cs, a);                      send events of list a to the Csound orchestra for
                                                immediate performance (or print events if no orchestra)
/* Functions for reclaiming memory */
    cscoreFreeEvent(cs, e);                     release the space of event e
    cscoreListFree(cs, a);                      release the space of list a (but not the events)
    cscoreListFreeEvents(cs, a);                release the events of list a, and the list space
  
/* Functions for working with multiple input score files */
fp = cscoreFileGetCurrent(cs);                  get the currently active input scorefile pointer
                                                (initially finds the command-line input scorefile pointer)
fp = cscoreFileOpen(cs, "filename");            open another input scorefile (maximum of 5)
     cscoreFileSetCurrent(cs, fp);              make fp the currently active scorefile pointer
     cscoreFileClose(cs, fp);                   close the scorefile relating to FILE *fp</programlisting>
    </informalexample>
  </para>

  <para>
Under Csound 4, the function names and parameters were as follows:
  </para>

  <para>
    <informalexample>
      <programlisting>
calling syntax                          description
--------------                          -----------
e = createv(n);          create a blank event with n pfields
e = defev("...");  defines an event as per the character string ...
e = copyev(f);           make a new copy of event f
e = getev();             read the next event in the score input file
putev(e);                write event e to the score output file
putstr("...");           write the string-defined event to score output
a = lcreat(n);           create an empty event list with n slots
     int  n;
a = lappev(a,e);         append event e to list a
a = lappstrev(a,"...");  append a string-defined event to list a;
a = lcopy(b);            copy the list b (but not the events)
a = lcopyev(b);          copy the events of b, making a new list
a = lget();              read all events from score input, up to next s or e
a = lgetnext(nbeats);    read next nbeats beats from score input
     float  nbeats;
a = lgetuntil(beatno);   read all events from score input up to beat beatno 
     float  beatno;
a = lsepf(b);            separate the f statements from list b into list a
a = lseptwf(b);          separate the t,w &amp; f statements from list b into list a
a = lcat(a,b);           concatenate (append) the list b onto the list a
lsort(a);                sort the list a into chronological order by p[2]
a = lxins(b,"...");      extract notes of instruments ... (no new events)
a = lxtimev(b,from,to);  extract notes of time-span, creating new events
     float  from, to;
lput(a);                 write the events of list a to the score output file
lplay(a);                send events of list a to the Csound orchestra for
                         immediate performance (or print events if no orchestra)
relev(e);                release the space of event e
lrel(a);                 release the space of list a (but not the events)
lrelev(a);               release the events of list a, and the list space
fp = getcurfp();         get the currently active input scorefile pointer
                         (initially finds the command-line input scorefile pointer)
fp = filopen("filename"); open another input scorefile (maximum of 5)
setcurfp(fp);            make fp the currently active scorefile pointer
filclose(fp);            close the scorefile relating to FILE *fp</programlisting>
    </informalexample>
  </para>
</section>
