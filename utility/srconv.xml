<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" id="srconv">
  <refentryinfo><title>Utilities</title></refentryinfo>
  <refmeta>
    <refentrytitle>srconv</refentrytitle>
  </refmeta>
 
  <refnamediv>
    <refname>srconv</refname>
    <refpurpose>
      Converts the sample rate of an audio file.
      <indexterm id="IndexSrconv"><primary>srconv</primary></indexterm>
    </refpurpose>
  </refnamediv>
 
  <refsect1>
    <title>Description</title>
    <para>
      Converts the sample rate of an audio file at sample rate Rin to
    a sample rate of Rout.  Optionally the ratio (Rin / Rout) may be
    linearly time-varying according to a set of (time, ratio) pairs in
    an auxiliary file.
    <note>This utility is suspect.  Better is to use libsamplerate.
    srconv will be removed or replaced soon.</note>
    </para>
  </refsect1>
 
  <refsect1>
    <title>Syntax</title>
    <synopsis><command>srconv</command> [flags] infile</synopsis>
  </refsect1>

  <refsect1>
    <title>Initialization</title>
    <para>
      Flags:
      <itemizedlist>
        <listitem><para>-<emphasis>P num</emphasis> = pitch
    transposition ratio (srate / r) [don't specify both P and
    r]</para></listitem> 
        <listitem><para>-<emphasis>Q num</emphasis>  =quality factor
    (1, 2, 3, or 4: default = 2)</para></listitem> 
        <listitem><para>-<emphasis>i filnam</emphasis> = auxiliary 
    breakpoints file (no breakpoint by default. i.e. No ratio change)
    </para></listitem> 
        <listitem><para>-<emphasis>r num</emphasis> = output sample
    rate (must be specified)</para></listitem> 
        <listitem><para>-<emphasis>o fnam</emphasis> = sound output
    filename</para></listitem> 
        <listitem><para>-<emphasis>A</emphasis> = create an AIFF
    format output soundfile</para></listitem> 
        <listitem><para>-<emphasis>J</emphasis> = create an IRCAM
    format output soundfile</para></listitem> 
        <listitem><para>-<emphasis>W</emphasis> = create a WAV format
    output soundfile</para></listitem> 
        <listitem><para>-<emphasis>h</emphasis> = no header on output
    soundfile</para></listitem> 
        <listitem><para>-<emphasis>c</emphasis> = 8-bit signed_char
    sound samples</para></listitem> 
        <listitem><para>-<emphasis>a</emphasis> = alaw sound
    samples</para></listitem> 
        <listitem><para>-<emphasis>8</emphasis> = 8-bit unsigned_char
    sound samples</para></listitem> 
        <listitem><para>-<emphasis>u</emphasis> = ulaw sound
    samples</para></listitem> 
        <listitem><para>-<emphasis>s</emphasis> = short_int sound
    samples</para></listitem> 
        <listitem><para>-<emphasis>l</emphasis> = long_int sound
    samples</para></listitem> 
        <listitem><para>-<emphasis>f</emphasis> = float sound
    samples</para></listitem> 
        <listitem><para>-<emphasis>r N</emphasis> = orchestra srate
    override</para></listitem> 
        <listitem><para>-<emphasis>K</emphasis> = Do not generate PEAK
    chunks</para></listitem> 
        <listitem><para>-<emphasis>R</emphasis> = continually rewrite
    header while writing soundfile (WAV/AIFF)</para></listitem> 
        <listitem><para>-<emphasis>H#</emphasis> = print a heartbeat
    style 1, 2 or 3 at each soundfile write</para></listitem> 
        <listitem><para>-<emphasis>N</emphasis> = notify (ring the
    bell) when score or miditrack is done</para></listitem> 
        <listitem><para>-<emphasis>- fnam</emphasis> = log output to
    file</para></listitem> 
      </itemizedlist>
    </para>

    <para>
      This program performs arbitrary sample-rate conversion with high
      fidelity.  The method is to step through the input at the
      desired sampling increment, and to compute the output points as
      appropriately weighted averages of the surrounding input points.
      There are two cases to consider:

      <orderedlist>
        <listitem><para>sample rates are in a small-integer ratio -
        weights are obtained from table.</para></listitem> 
        <listitem><para>sample rates are in a large-integer ratio -
        weights are linearly interpolated from
        table.</para></listitem> 
      </orderedlist>
    </para>

    <para>
      Calculate increment: if decimating, then window is impulse
    response of low-pass filter with cutoff frequency at half of
    output sample rate; if interpolating, then window is impulse
    response of lowpass filter with cutoff frequency at half of input
    sample rate. 
    </para>
  </refsect1>
 
  <refsect1>
    <title>Credits</title>
    <para>Author: Mark Dolson</para>
    <para>August 26, 1989</para>
    <para>Author: John ffitch</para>
    <para>December 30, 2000</para>
  </refsect1>
</refentry>
