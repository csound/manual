<?xml version="1.0" encoding="UTF-8"?>
<programlisting xmlns="http://docbook.org/ns/docbook" version="5.0">
<emphasis role="csdtag">&lt;CsoundSynthesizer&gt;</emphasis>
<emphasis role="csdtag">&lt;CsOptions&gt;</emphasis>
<emphasis role="comment">; Select audio/midi flags here according to platform</emphasis>
<emphasis role="comment">; Audio out   Audio in</emphasis>
-odac           -iadc     <emphasis role="comment">;;;RT audio I/O</emphasis>
<emphasis role="comment">; For Non-realtime ouput leave only the line below:</emphasis>
<emphasis role="comment">; -o vcella.wav -W ;;; for file output any platform</emphasis>
<emphasis role="csdtag">&lt;/CsOptions&gt;</emphasis>
<emphasis role="csdtag">&lt;CsInstruments&gt;</emphasis>
<emphasis role="comment">; vcella.csd</emphasis>
<emphasis role="comment">; by Anthony Kozar</emphasis>

<emphasis role="comment">; This file demonstrates some of the new opcodes available in</emphasis>
<emphasis role="comment">; Csound 5 that come from Gabriel Maldonado's CsoundAV.</emphasis>

<emphasis role="ohdr">sr</emphasis>        <emphasis role="op">=</emphasis> 44100
<emphasis role="ohdr">kr</emphasis>        <emphasis role="op">=</emphasis> 4410
<emphasis role="ohdr">ksmps</emphasis>     <emphasis role="op">=</emphasis> 10
<emphasis role="ohdr">nchnls</emphasis>    <emphasis role="op">=</emphasis> 1

<emphasis role="comment">; Cellular automata-driven oscillator bank using vcella and adsynt</emphasis>
<emphasis role="oblock">instr</emphasis> 1
  idur      <emphasis role="op">=</emphasis> p3
  iCArate   <emphasis role="op">=</emphasis> p4                                <emphasis role="comment">; number of times per second the CA calculates new values</emphasis>
	
  <emphasis role="comment">; f-tables for CA parameters</emphasis>
  iCAinit   <emphasis role="op">=</emphasis> p5                                <emphasis role="comment">; CA initial states					</emphasis>
  iCArule   <emphasis role="op">=</emphasis> p6                                <emphasis role="comment">; CA rule values</emphasis>
  <emphasis role="comment">; The rule is used as follows:</emphasis>
  <emphasis role="comment">; the states (values) of each cell are summed with their neighboring cells within</emphasis>
  <emphasis role="comment">; the specied radius (+/- 1 or 2 cells).  Each sum is used as an index to read a </emphasis>
  <emphasis role="comment">; value from the rule table which becomes the new state value for its cell.</emphasis>
  <emphasis role="comment">; All new states are calculated first, then the new values are all applied </emphasis>
  <emphasis role="comment">; simultaneously.</emphasis>

  ielements <emphasis role="op">=</emphasis> <emphasis role="opc">ftlen</emphasis>(iCAinit)
  inumrules <emphasis role="op">=</emphasis> <emphasis role="opc">ftlen</emphasis>(iCArule)
  iradius   <emphasis role="op">=</emphasis> 1

  <emphasis role="comment">; create some needed tables</emphasis>
  iCAstate  <emphasis role="ohdr">ftgen</emphasis>     0, 0, ielements, <emphasis role="op">-</emphasis>2, 0    <emphasis role="comment">; will hold the current CA states</emphasis>
  ifreqs    <emphasis role="ohdr">ftgen</emphasis>     0, 0, ielements, <emphasis role="op">-</emphasis>2, 0    <emphasis role="comment">; will hold the oscillator frequency for each cell</emphasis>
  iamps     <emphasis role="ohdr">ftgen</emphasis>     0, 0, ielements, <emphasis role="op">-</emphasis>2, 0    <emphasis role="comment">; will hold the amplitude for each cell</emphasis>

  <emphasis role="comment">; calculate cellular automata state</emphasis>
  ktrig     <emphasis role="opc">metro</emphasis>     iCArate                   <emphasis role="comment">; trigger the CA to update iCArate times per second</emphasis>
            <emphasis role="opc">vcella</emphasis>    ktrig, 0, iCAstate, iCAinit, iCArule, ielements, inumrules, iradius

  <emphasis role="comment">; scale CA state for use as amplitudes of the oscillator bank</emphasis>
            <emphasis role="opc">vcopy</emphasis>     iamps, iCAstate, ielements
            <emphasis role="opc">vmult</emphasis>     iamps, (1<emphasis role="op">/</emphasis>3), ielements   <emphasis role="comment">; divide by 3 since state values are 0-3</emphasis>

            <emphasis role="opc">vport</emphasis>     iamps, .01, ielements     <emphasis role="comment">; need to smooth the amplitude changes for adsynt</emphasis>
  <emphasis role="comment">; we could use adsynt2 instead of adsynt, but it does not seem to be working</emphasis>

  <emphasis role="comment">; i-time loop for calculating frequencies</emphasis>
  index     <emphasis role="op">=</emphasis>         0
  inew      <emphasis role="op">=</emphasis>         1
  iratio    <emphasis role="op">=</emphasis>         1.125                     <emphasis role="comment">; just major second (creating a whole tone scale)</emphasis>
<emphasis role="olabel">loop1</emphasis><emphasis role="op">:</emphasis>
            <emphasis role="opc">tableiw</emphasis>   inew, index, ifreqs, 0    <emphasis role="comment">; 0 indicates integer indices</emphasis>
  inew      <emphasis role="op">=</emphasis>         inew <emphasis role="op">*</emphasis> iratio
  index     <emphasis role="op">=</emphasis>         index <emphasis role="op">+</emphasis> 1
  <emphasis role="octrl">if</emphasis> (index <emphasis role="op">&lt;</emphasis> ielements) <emphasis role="octrl">igoto</emphasis> <emphasis role="olabel">loop1</emphasis>

  <emphasis role="comment">; create sound with additive oscillator bank</emphasis>
  ifreqbase <emphasis role="op">=</emphasis> 64
  iwavefn   <emphasis role="op">=</emphasis> 1
  iphs      <emphasis role="op">=</emphasis> 2                                 <emphasis role="comment">; random oscillator phases</emphasis>

  kenv      <emphasis role="opc">linseg</emphasis>    0.0, 0.5, 1.0, idur <emphasis role="op">-</emphasis> 1.0, 1.0, 0.5, 0.0
  aosc      <emphasis role="opc">adsynt</emphasis>    kenv, ifreqbase, iwavefn, ifreqs, iamps, ielements, iphs

            <emphasis role="opc">out</emphasis>       aosc <emphasis role="op">*</emphasis> <emphasis role="opc">ampdb</emphasis>(68)
<emphasis role="oblock">endin</emphasis>

<emphasis role="csdtag">&lt;/CsInstruments&gt;</emphasis>
<emphasis role="csdtag">&lt;CsScore&gt;</emphasis>
<emphasis role="stamnt">f</emphasis>1 0 16384 10 1

<emphasis role="comment">; This example uses a 4-state cellular automata</emphasis>
<emphasis role="comment">; Possible state values are 0, 1, 2, and 3</emphasis>

<emphasis role="comment">; CA initial state</emphasis>
<emphasis role="comment">; We have 16 cells in our CA, so the initial state table is size 16</emphasis>
<emphasis role="stamnt">f</emphasis>10 0 16 -2  0 1 0 0  1 0 0 2  2 0 0 1  0 0 1 0

<emphasis role="comment">; CA rule</emphasis>
<emphasis role="comment">; The maximum sum with radius 1 (3 cells) is 9, so we need 10 values in the rule (0-9)</emphasis>
<emphasis role="stamnt">f</emphasis>11 0 16 -2  1 0 3 2 1  0 0 2 1 0

<emphasis role="comment">; Here is our one and only note!</emphasis>
<emphasis role="stamnt">i</emphasis>1 0  20  4  10  11

<emphasis role="stamnt">e</emphasis>

<emphasis role="csdtag">&lt;/CsScore&gt;</emphasis>
<emphasis role="csdtag">&lt;/CsoundSynthesizer&gt;</emphasis>
</programlisting>
