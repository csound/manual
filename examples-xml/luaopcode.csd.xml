<?xml version="1.0" encoding="UTF-8"?>
<programlisting xmlns="http://docbook.org/ns/docbook" version="5.0">
<emphasis role="csdtag">&lt;CsoundSynthesizer&gt;</emphasis>
<emphasis role="csdtag">&lt;CsInstruments&gt;</emphasis>
<emphasis role="opc">lua_opdef</emphasis> "luatest", {{
local ffi <emphasis role="op">=</emphasis> require("ffi")
local string <emphasis role="op">=</emphasis> require("string")
local csoundLibrary <emphasis role="op">=</emphasis> ffi.load('csound64.dll.5.2')
ffi.cdef[[
    <emphasis role="opc">int</emphasis> csoundGetKsmps(void <emphasis role="op">*</emphasis>)<emphasis role="comment">;</emphasis>
    double csoundGetSr(void <emphasis role="op">*</emphasis>)<emphasis role="comment">;</emphasis>
    struct luatest_arguments {double <emphasis role="op">*</emphasis><emphasis role="opc">out</emphasis><emphasis role="comment">; double *stringout; char *stringin; double *in1; double *in2; double sr; int ksmps; };</emphasis>
]]
function luatest_init(csound, opcode, carguments)
    local arguments <emphasis role="op">=</emphasis> ffi.cast("struct luatest_arguments <emphasis role="op">*</emphasis>", carguments)
    arguments.sr <emphasis role="op">=</emphasis> csoundLibrary.csoundGetSr(csound)
    <emphasis role="opc">print</emphasis>(string.format('stringin<emphasis role="op">:</emphasis> <emphasis role="op">%</emphasis>s', ffi.string(arguments.stringin)))
    <emphasis role="opc">print</emphasis>(string.format('sr<emphasis role="op">:</emphasis> <emphasis role="op">%</emphasis>f', arguments.sr))
    arguments.ksmps <emphasis role="op">=</emphasis> csoundLibrary.csoundGetKsmps(csound)
    <emphasis role="opc">print</emphasis>(string.format('ksmps<emphasis role="op">:</emphasis> <emphasis role="op">%</emphasis>d', arguments.ksmps))
    arguments.out[0] <emphasis role="op">=</emphasis> arguments.in1[0] <emphasis role="op">*</emphasis> arguments.in2[0]
    ffi.copy(arguments.stringout, 'Hello, world!')
    <emphasis role="opc">return</emphasis> 0
end
function luatest_kontrol(csound, opcode, carguments)
    local arguments <emphasis role="op">=</emphasis> ffi.cast("struct luatest_arguments <emphasis role="op">*</emphasis>", carguments)
    arguments.out[0] <emphasis role="op">=</emphasis> arguments.in1[0] <emphasis role="op">*</emphasis> arguments.in2[0]
    <emphasis role="opc">return</emphasis> 0
end
function luatest_noteoff(csound, opcode, carguments)
    local arguments <emphasis role="op">=</emphasis> ffi.cast("struct luatest_arguments <emphasis role="op">*</emphasis>", carguments)
    arguments.out[0] <emphasis role="op">=</emphasis> arguments.in1[0] <emphasis role="op">*</emphasis> arguments.in2[0]
    <emphasis role="opc">print</emphasis>('off')
    <emphasis role="opc">return</emphasis> 0
end
}}

<emphasis role="oblock">instr</emphasis> 1
    iresult <emphasis role="op">=</emphasis> 0
    Stringin <emphasis role="op">=</emphasis> "stringin"
    Stringout <emphasis role="op">=</emphasis> "stringout"
    <emphasis role="opc">lua_iopcall</emphasis> "luatest", iresult, Stringout, Stringin, p2, p3
    <emphasis role="opc">prints</emphasis> Stringout
<emphasis role="oblock">endin</emphasis>
<emphasis role="oblock">instr</emphasis> 2
    iresult <emphasis role="op">=</emphasis> 0
    Stringin <emphasis role="op">=</emphasis> "stringin"
    Stringout <emphasis role="op">=</emphasis> "initial value"
    <emphasis role="opc">lua_iopcall_off</emphasis> "luatest", iresult, Stringout, Stringin, p2, p3
    <emphasis role="opc">print</emphasis> iresult
    <emphasis role="opc">prints</emphasis> Stringout
<emphasis role="oblock">endin</emphasis>
<emphasis role="csdtag">&lt;/CsInstruments&gt;</emphasis>
<emphasis role="csdtag">&lt;CsScore&gt;</emphasis>
<emphasis role="stamnt">i</emphasis> 1 1 2
<emphasis role="stamnt">i</emphasis> 2 2 2
<emphasis role="stamnt">i</emphasis> 1 3 2
<emphasis role="stamnt">e</emphasis>
<emphasis role="csdtag">&lt;/CsScore&gt;</emphasis>
<emphasis role="csdtag">&lt;/CsoundSynthesizer&gt;</emphasis>
</programlisting>
