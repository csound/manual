<?xml version="1.0" encoding="UTF-8"?>
<programlisting xmlns="http://docbook.org/ns/docbook" version="5.0">
<emphasis role="csdtag">&lt;CsoundSynthesizer&gt;</emphasis>
<emphasis role="csdtag">&lt;CsOptions&gt;</emphasis>
<emphasis role="comment">; Select audio/midi flags here according to platform</emphasis>
<emphasis role="comment">;-odac           -iadc     ;;;RT audio I/O</emphasis>
<emphasis role="comment">; For Non-realtime ouput leave only the line below:</emphasis>
<emphasis role="comment">; -o cell.wav -W ;;; for file output any platform</emphasis>
<emphasis role="csdtag">&lt;/CsOptions&gt;</emphasis>
<emphasis role="csdtag">&lt;CsInstruments&gt;</emphasis>
<emphasis role="comment">; cell.csd by Gleb Rogozinsky</emphasis>

<emphasis role="ohdr">sr</emphasis>        <emphasis role="op">=</emphasis> 44100
<emphasis role="ohdr">kr</emphasis>        <emphasis role="op">=</emphasis> 4410
<emphasis role="ohdr">ksmps</emphasis>     <emphasis role="op">=</emphasis> 10
<emphasis role="ohdr">nchnls</emphasis>    <emphasis role="op">=</emphasis> 1
<emphasis role="ohdr">0dbfs</emphasis>     <emphasis role="op">=</emphasis> 1

<emphasis role="comment">; Cellular automaton-driven synthesis in spectral domain</emphasis>
<emphasis role="oblock">instr</emphasis> 1

  iatt      <emphasis role="op">=</emphasis> p4                                <emphasis role="comment">; envelope attack time</emphasis>
  isus      <emphasis role="op">=</emphasis> p5                                <emphasis role="comment">; envelope sustain time</emphasis>
  irel      <emphasis role="op">=</emphasis> p6                                <emphasis role="comment">; envelope release time</emphasis>
  ivol      <emphasis role="op">=</emphasis> p7                                <emphasis role="comment">; overall volume</emphasis>
  
  <emphasis role="comment">; create some white noise</emphasis>
  asig      <emphasis role="opc">rand</emphasis>      0.8                      
  
  <emphasis role="comment">; spectral analysis of asig</emphasis>
  fsig      <emphasis role="opc">pvsanal</emphasis>   asig, 2048, 1024, 2048, 0  <emphasis role="comment">; get a vector of magnitudes</emphasis>
           
  <emphasis role="comment">; calculate cellular automaton state</emphasis>
  kfreq     <emphasis role="opc">line</emphasis>      50, 5, 1                  <emphasis role="comment">; variable CA triggering frequency</emphasis>
  ktrig     <emphasis role="opc">metro</emphasis>     kfreq                     <emphasis role="comment">; trigger the CA to update cells</emphasis>
            <emphasis role="opc">cell</emphasis>      ktrig, 0, 3, 1, 2, 2048   <emphasis role="comment">; cells are written into ftable 3 </emphasis>
                                                                        
                                                                         
  <emphasis role="comment">; use current row of cells in spectral domain</emphasis>
  fmas      <emphasis role="opc">pvstencil</emphasis> fsig, 0, 1, 3             <emphasis role="comment">; apply spectral mask </emphasis>
  aout      <emphasis role="opc">pvsynth</emphasis>   fmas                      <emphasis role="comment">; reconstruct time signal </emphasis>
  
  <emphasis role="comment">; apply envelope and out signal</emphasis>
  kenv      <emphasis role="opc">expseg</emphasis>    .001, iatt, 1, isus, 1, irel, .001
            <emphasis role="opc">out</emphasis>       aout<emphasis role="op">*</emphasis>kenv<emphasis role="op">*</emphasis>ivol
<emphasis role="oblock">endin</emphasis>

<emphasis role="csdtag">&lt;/CsInstruments&gt;</emphasis>
<emphasis role="csdtag">&lt;CsScore&gt;</emphasis>

<emphasis role="comment">; This example uses one-dimensional cellular automaton</emphasis>
<emphasis role="comment">; to produce structures in spectral domain</emphasis>

<emphasis role="comment">; We have to prepare initial row of cells.</emphasis>
<emphasis role="comment">; One alive cell is enough to produce a simple fractal,</emphasis>
<emphasis role="comment">; so two alivee cells will make structure more sophisticated</emphasis>
<emphasis role="stamnt">f</emphasis>1 0 2048 7 0 150 0 0 1 1 1 0 0 45 0 0 1 1 1 0 0

<emphasis role="comment">; The CA rule is used as follows:</emphasis>
<emphasis role="comment">; the states (values) of each cell are summed with their neighboring cells.</emphasis>
<emphasis role="comment">; Each sum is used as an index to read a next state of cell</emphasis>
<emphasis role="comment">; from the rule table.</emphasis>
<emphasis role="comment">; Let us try rule # 129 (LSB binary 1 0 0 0 0 0 0 1).</emphasis>
<emphasis role="comment">; This rule will produce a fractal structure for single active cell</emphasis>
<emphasis role="comment">; For more rules see http://mathworld.wolfram.com/ElementaryCellularAutomaton.html</emphasis>
<emphasis role="stamnt">f</emphasis>2 0 8 -2 1 0 0 0 0 0 0 1
<emphasis role="comment">; Try some different rules i.E. 254 (0 1 1 1 1 1 1 1) or 169 (1 0 0 1 0 1 0 1)</emphasis>

<emphasis role="comment">; Prepare the output table of ielements size</emphasis>
<emphasis role="stamnt">f</emphasis>3 0 2048 10 0

<emphasis role="comment">; Time to make it sound!</emphasis>
<emphasis role="stamnt">i</emphasis>1 0  13  0.3  7  3  1 
<emphasis role="stamnt">e</emphasis>

<emphasis role="csdtag">&lt;/CsScore&gt;</emphasis>
<emphasis role="csdtag">&lt;/CsoundSynthesizer&gt;</emphasis>
</programlisting>
