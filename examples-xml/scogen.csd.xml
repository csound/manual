<?xml version="1.0" encoding="UTF-8"?>
<programlisting xmlns="http://docbook.org/ns/docbook" version="5.0">
<emphasis role="csdtag">&lt;CsoundSynthesizer&gt;</emphasis>
<emphasis role="csdtag">&lt;CsOptions&gt;</emphasis>
<emphasis role="comment">; Select audio/midi flags here according to platform</emphasis>
<emphasis role="comment">; Audio out   Audio in    No messages</emphasis>
<emphasis role="comment">; -odac           -iadc     -d     ;;;RT audio I/O</emphasis>
<emphasis role="comment">; For Non-realtime ouput leave only the line below:</emphasis>
-n
<emphasis role="comment">;Don't write audio ouput to disk</emphasis>
<emphasis role="csdtag">&lt;/CsOptions&gt;</emphasis>
<emphasis role="csdtag">&lt;CsInstruments&gt;</emphasis>
<emphasis role="comment">;===========================================================</emphasis>
<emphasis role="comment">;        scogen.csd       by: Matt Ingalls</emphasis>
<emphasis role="comment">;</emphasis>
<emphasis role="comment">;    a "port" of sorts</emphasis>
<emphasis role="comment">;      of the old "mills" score generator (scogen)</emphasis>
<emphasis role="comment">;</emphasis>
<emphasis role="comment">;    this instrument creates a schottstaedt.sco file</emphasis>
<emphasis role="comment">;    to be used with the schottstaedt.orc file</emphasis>
<emphasis role="comment">;</emphasis>
<emphasis role="comment">;    as long as you dont save schottstaedt.orc as a .csd</emphasis>
<emphasis role="comment">;    file, you should be able to keep it open in MacCsound</emphasis>
<emphasis role="comment">;    and render each newly generated .sco file.</emphasis>
<emphasis role="comment">;</emphasis>
<emphasis role="comment">;===========================================================</emphasis>


gScoName <emphasis role="op">=</emphasis> "<emphasis role="op">/</emphasis>Users<emphasis role="op">/</emphasis>matt<emphasis role="op">/</emphasis>Desktop<emphasis role="op">/</emphasis>schottstaedt.sco"     <emphasis role="comment">; the name of the file to be generated</emphasis>

    <emphasis role="ohdr">sr</emphasis>    <emphasis role="op">=</emphasis>    100     <emphasis role="comment">; this defines our temporal resolution,</emphasis>
                <emphasis role="comment">; an sr of 100 means we will generate p2 and p3 values</emphasis>
                <emphasis role="comment">; to the nearest 1/100th of a second</emphasis>

    <emphasis role="ohdr">ksmps</emphasis> <emphasis role="op">=</emphasis>    1     <emphasis role="comment">; set kr=sr so we can do everything at k-rate</emphasis>


<emphasis role="comment">; some print opcodes</emphasis>
<emphasis role="oblock">opcode</emphasis> PrintInteger, 0, <emphasis role="opc">k</emphasis>
    kval    <emphasis role="opc">xin</emphasis>
        <emphasis role="opc">fprintks</emphasis>    gScoName, "<emphasis role="op">%</emphasis>d", kval
<emphasis role="oblock">endop</emphasis>

<emphasis role="oblock">opcode</emphasis> PrintFloat, 0, <emphasis role="opc">k</emphasis>
    kval    <emphasis role="opc">xin</emphasis>
        <emphasis role="opc">fprintks</emphasis>    gScoName, "<emphasis role="op">%</emphasis>f", kval
<emphasis role="oblock">endop</emphasis>

<emphasis role="oblock">opcode</emphasis> PrintTab, 0, 0
    <emphasis role="opc">fprintks</emphasis>    gScoName, "<emphasis role="op">%</emphasis>n"
<emphasis role="oblock">endop</emphasis>

<emphasis role="oblock">opcode</emphasis> PrintReturn, 0, 0
    <emphasis role="opc">fprintks</emphasis>    gScoName, "<emphasis role="op">%</emphasis>r"
<emphasis role="oblock">endop</emphasis>


<emphasis role="comment">; recursively calling opcode to handle all the optional parameters</emphasis>
<emphasis role="oblock">opcode</emphasis> ProcessAdditionalPfields, 0, ikio
    iPtable, kndx, iNumPfields, iPfield <emphasis role="opc">xin</emphasis>

    <emphasis role="comment">; additional pfields start at 5, we use a default 0 to identify the first call</emphasis>
    iPfield <emphasis role="op">=</emphasis> (iPfield <emphasis role="op">==</emphasis> 0 <emphasis role="op">?</emphasis> 5 <emphasis role="op">:</emphasis> iPfield)

    <emphasis role="octrl">if</emphasis> (iPfield <emphasis role="op">&gt;</emphasis> iNumPfields) <emphasis role="octrl">goto</emphasis> endloop
        <emphasis role="comment">; find our tables</emphasis>
        iMinTable <emphasis role="opc">table</emphasis>    2<emphasis role="op">*</emphasis>iPfield<emphasis role="op">-</emphasis>1, iPtable
        iMaxTable <emphasis role="opc">table</emphasis>    2<emphasis role="op">*</emphasis>iPfield, iPtable

        <emphasis role="comment">; get values from our tables</emphasis>
        kMin <emphasis role="opc">tablei</emphasis>    kndx, iMinTable
        kMax <emphasis role="opc">tablei</emphasis>    kndx, iMaxTable

        <emphasis role="comment">; find a random value in the range and write it to the score</emphasis>
        <emphasis role="opc">fprintks</emphasis> gScoName, "<emphasis role="op">%</emphasis>t<emphasis role="op">%</emphasis>f", kMin <emphasis role="op">+</emphasis> <emphasis role="opc">rnd</emphasis>(kMax<emphasis role="op">-</emphasis>kMin)

        <emphasis role="comment">; recursively call for any additional pfields.</emphasis>
        ProcessAdditionalPfields iPtable, kndx, iNumPfields, iPfield <emphasis role="op">+</emphasis> 1
    endloop<emphasis role="op">:</emphasis>

<emphasis role="oblock">endop</emphasis>


<emphasis role="op">/</emphasis><emphasis role="op">*</emphasis> <emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">=</emphasis>
    Generate <emphasis role="opc">a</emphasis> gesture of <emphasis role="opc">i</emphasis><emphasis role="op">-</emphasis>statements

    p2 <emphasis role="op">=</emphasis> start of the gesture
    p3 <emphasis role="op">=</emphasis> duration of the gesture
    p4 <emphasis role="op">=</emphasis> number of <emphasis role="opc">a</emphasis> function that contains <emphasis role="opc">a</emphasis> list of all
        function <emphasis role="opc">table</emphasis> numbers used to define the
        pfield <emphasis role="opc">random</emphasis> distribution
    p5 <emphasis role="op">=</emphasis> <emphasis role="opc">scale</emphasis> generated p4 values according to density (0<emphasis role="op">=</emphasis>off, 1<emphasis role="op">=</emphasis>on) [todo]
    p6 <emphasis role="op">=</emphasis> let durations overlap gesture duration (0<emphasis role="op">=</emphasis>off, 1<emphasis role="op">=</emphasis>on) [todo]
    p7 <emphasis role="op">=</emphasis> <emphasis role="ohdr">seed</emphasis> for <emphasis role="opc">random</emphasis> number generator <emphasis role="ohdr">seed</emphasis> [todo]
  <emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">==</emphasis><emphasis role="op">=</emphasis>
<emphasis role="op">*</emphasis><emphasis role="op">/</emphasis>
<emphasis role="oblock">instr</emphasis> Gesture

    <emphasis role="comment">; initialize</emphasis>
    iResolution <emphasis role="op">=</emphasis> 1<emphasis role="op">/</emphasis><emphasis role="ohdr">sr</emphasis>

    kNextStart <emphasis role="opc">init</emphasis> p2
    kCurrentTime <emphasis role="opc">init</emphasis> p2

    iNumPfields <emphasis role="opc">table</emphasis>        0, p4
    iInstrMinTable <emphasis role="opc">table</emphasis>    1, p4
    iInstrMaxTable <emphasis role="opc">table</emphasis>    2, p4
    iDensityMinTable <emphasis role="opc">table</emphasis>    3, p4
    iDensityMaxTable <emphasis role="opc">table</emphasis>    4, p4
    iDurMinTable <emphasis role="opc">table</emphasis>    5, p4
    iDurMaxTable <emphasis role="opc">table</emphasis>    6, p4
    iAmpMinTable <emphasis role="opc">table</emphasis>    7, p4
    iAmpMaxTable <emphasis role="opc">table</emphasis>    8, p4

    <emphasis role="comment">; check to make sure there is enough data</emphasis>
    <emphasis role="opc">print</emphasis> iNumPfields
    <emphasis role="octrl">if</emphasis> iNumPfields <emphasis role="op">&lt;</emphasis> 4 then
        <emphasis role="opc">prints</emphasis> "<emphasis role="op">%</emphasis>dError<emphasis role="op">:</emphasis> At least 4 <emphasis role="opc">p</emphasis><emphasis role="op">-</emphasis>fields (8 functions) need to be specified.<emphasis role="op">%</emphasis>n", iNumPfields
        <emphasis role="opc">turnoff</emphasis>
    <emphasis role="octrl">endif</emphasis>

    <emphasis role="comment">; initial comment</emphasis>
    <emphasis role="opc">fprints</emphasis>    gScoName, "<emphasis role="op">%</emphasis>!Generated Gesture from <emphasis role="op">%</emphasis>f to <emphasis role="op">%</emphasis>f seconds<emphasis role="op">%</emphasis>n <emphasis role="op">%</emphasis>!<emphasis role="op">%</emphasis>t<emphasis role="op">%</emphasis>twith <emphasis role="opc">a</emphasis> <emphasis role="opc">p</emphasis><emphasis role="op">-</emphasis><emphasis role="opc">max</emphasis> of <emphasis role="op">%</emphasis>d<emphasis role="op">%</emphasis>n<emphasis role="op">%</emphasis>n", p2, p3, iNumPfields

    <emphasis role="comment">; k-rate stuff</emphasis>
    <emphasis role="octrl">if</emphasis> (kCurrentTime <emphasis role="op">&gt;=</emphasis> kNextStart) then <emphasis role="comment">; write a new note!</emphasis>

        kndx <emphasis role="op">=</emphasis> (kCurrentTime<emphasis role="op">-</emphasis>p2)<emphasis role="op">/</emphasis>p3

        <emphasis role="comment">; get the required pfield ranges</emphasis>
        kInstMin <emphasis role="opc">tablei</emphasis>    kndx, iInstrMinTable
        kInstMax <emphasis role="opc">tablei</emphasis>    kndx, iInstrMaxTable
        kDensMin <emphasis role="opc">tablei</emphasis>    kndx, iDensityMinTable
        kDensMax <emphasis role="opc">tablei</emphasis>    kndx, iDensityMaxTable
        kDurMin <emphasis role="opc">tablei</emphasis>    kndx, iDurMinTable
        kDurMax <emphasis role="opc">tablei</emphasis>    kndx, iDurMaxTable
        kAmpMin <emphasis role="opc">tablei</emphasis>    kndx, iAmpMinTable
        kAmpMax <emphasis role="opc">tablei</emphasis>    kndx, iAmpMaxTable

        <emphasis role="comment">; find random values for all our required parametrs and print the i-statement</emphasis>
        <emphasis role="opc">fprintks</emphasis> gScoName, "i<emphasis role="op">%</emphasis>d<emphasis role="op">%</emphasis>t<emphasis role="op">%</emphasis>f<emphasis role="op">%</emphasis>t<emphasis role="op">%</emphasis>f<emphasis role="op">%</emphasis>t<emphasis role="op">%</emphasis>f", kInstMin <emphasis role="op">+</emphasis> <emphasis role="opc">rnd</emphasis>(kInstMax<emphasis role="op">-</emphasis>kInstMin), kNextStart, kDurMin <emphasis role="op">+</emphasis> <emphasis role="opc">rnd</emphasis>(kDurMax<emphasis role="op">-</emphasis>kDurMin), kAmpMin <emphasis role="op">+</emphasis> <emphasis role="opc">rnd</emphasis>(kAmpMax<emphasis role="op">-</emphasis>kAmpMin)

        <emphasis role="comment">; now any additional pfields</emphasis>
        ProcessAdditionalPfields p4, kndx, iNumPfields

        PrintReturn

        <emphasis role="comment">; calculate next starttime</emphasis>
        kDensity <emphasis role="op">=</emphasis> kDensMin <emphasis role="op">+</emphasis> <emphasis role="opc">rnd</emphasis>(kDensMax<emphasis role="op">-</emphasis>kDensMin)
        <emphasis role="octrl">if</emphasis> (kDensity <emphasis role="op">&lt;</emphasis> iResolution) then
            kDensity <emphasis role="op">=</emphasis> iResolution
        <emphasis role="octrl">endif</emphasis>
        kNextStart <emphasis role="op">=</emphasis> kNextStart <emphasis role="op">+</emphasis> kDensity
    <emphasis role="octrl">endif</emphasis>

    kCurrentTime <emphasis role="op">=</emphasis> kCurrentTime <emphasis role="op">+</emphasis> iResolution
<emphasis role="oblock">endin</emphasis>


<emphasis role="csdtag">&lt;/CsInstruments&gt;</emphasis>
<emphasis role="csdtag">&lt;CsScore&gt;</emphasis>
/*
===========================================================
  <emphasis role="stamnt">s</emphasis>cogen.<emphasis role="stamnt">s</emphasis>co

    <emphasis role="stamnt">t</emphasis>his csound module genera<emphasis role="stamnt">t</emphasis>es a score file
    you specify a gesture of notes by giving
    <emphasis role="stamnt">t</emphasis>he "ges<emphasis role="stamnt">t</emphasis>ure" ins<emphasis role="stamnt">t</emphasis>rumen<emphasis role="stamnt">t</emphasis> a number <emphasis role="stamnt">t</emphasis>o a
    (negative) gen2 table.

    <emphasis role="stamnt">t</emphasis>his <emphasis role="stamnt">t</emphasis>able s<emphasis role="stamnt">t</emphasis>ores numbers <emphasis role="stamnt">t</emphasis>o pairs of func<emphasis role="stamnt">t</emphasis>ions.
    <emphasis role="stamnt">e</emphasis>ach function-pair r<emphasis role="stamnt">e</emphasis>pr<emphasis role="stamnt">e</emphasis>s<emphasis role="stamnt">e</emphasis>nts a rang<emphasis role="stamnt">e</emphasis> (min-max)
    of randomness for every pfield for the notes to
    <emphasis role="stamnt">b</emphasis>e generated.
===========================================================
*/


<emphasis role="comment">; common tables for pfield ranges</emphasis>
<emphasis role="stamnt">f</emphasis>100    0    2    -7    0 2 0    <emphasis role="comment">; static 0</emphasis>
<emphasis role="stamnt">f</emphasis>101    0    2    -7    1 2 1    <emphasis role="comment">; static 1</emphasis>
<emphasis role="stamnt">f</emphasis>102    0    2    -7    0 2 1 <emphasis role="comment">; ramp 0-&gt;1</emphasis>
<emphasis role="stamnt">f</emphasis>103    0    2    -7    1 2 0 <emphasis role="comment">; ramp 1-&gt;0</emphasis>
<emphasis role="stamnt">f</emphasis>105    0    2    -7    10 2 10 <emphasis role="comment">; static 10</emphasis>
<emphasis role="stamnt">f</emphasis>106    0    2    -7    .1 2 .1 <emphasis role="comment">; static .1</emphasis>

<emphasis role="comment">; specific pfield ranges</emphasis>
<emphasis role="stamnt">f</emphasis>10    0    2    -7       .8 2 .01 <emphasis role="comment">; density</emphasis>
<emphasis role="stamnt">f</emphasis>11    0    2    -7       8 2 4 <emphasis role="comment">; pitchmin</emphasis>
<emphasis role="stamnt">f</emphasis>12    0    2    -7       8 2 12 <emphasis role="comment">; pitchmax</emphasis>


<emphasis role="comment">;=== table containing the function numbers used for all the p-field distributions</emphasis>
<emphasis role="comment">;</emphasis>
<emphasis role="comment">;    p1 -     table number</emphasis>
<emphasis role="comment">;    p2 -     time table is instantiated</emphasis>
<emphasis role="comment">;    p3 -     size of table (must be &gt;= p5!)</emphasis>
<emphasis role="comment">;    p4 -     gen# (should be = -2)</emphasis>
<emphasis role="comment">;    p5 -     number of pfields of each note to be generated</emphasis>
<emphasis role="comment">;    p6 -     table number of the function representing the minimum possible note number (p1) of a generated note</emphasis>
<emphasis role="comment">;    p7 -     table number of the function representing the maximum possible note number (p1) of a generated note</emphasis>
<emphasis role="comment">;    p8 -     table number of the function representing the minimum possible noteon-to-noteon time (p2 density) of a generated note</emphasis>
<emphasis role="comment">;    p9 -     table number of the function representing the maximum possible noteon-to-noteon time (p2 density) of a generated note</emphasis>
<emphasis role="comment">;    p10 -    table number of the function representing the minimum possible duration (p3) of a generated note</emphasis>
<emphasis role="comment">;    p11 -    table number of the function representing the maximum possible duration (p3) of a generated note</emphasis>
<emphasis role="comment">;    p12 -    table number of the function representing the maximum possible amplitude (p4) of a generated note</emphasis>
<emphasis role="comment">;    p13 -    table number of the function representing the maximum possible amplitude (p5) of a generated note</emphasis>
<emphasis role="comment">;    p14,p16.. -    table number of the function representing the minimum possible value for additional pfields (p5,p6..) of a generated note</emphasis>
<emphasis role="comment">;    p15,p17.. -    table number of the function representing the maximum possible value for additional pfields (p5,p6..) of a generated note</emphasis>

<emphasis role="comment">;        siz    2    #pds p1min    p1max p2min    p2max p3min    p3max p4min    p4max p5min    p5max p6min    p6max</emphasis>
<emphasis role="stamnt">f</emphasis>1    0    32    -2    6    101    101    10    10 101    105    100    106    11    12    100    101


<emphasis role="comment">;gesture definitions</emphasis>
<emphasis role="comment">;        start    dur    pTble    scale    overlap seed</emphasis>
<emphasis role="stamnt">i</emphasis>"Gesture"     0    60    1 <emphasis role="comment">;todo--&gt;0    0    123</emphasis>
<emphasis role="csdtag">&lt;/CsScore&gt;</emphasis>
<emphasis role="csdtag">&lt;/CsoundSynthesizer&gt;</emphasis>
</programlisting>
