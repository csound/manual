<?xml version="1.0" encoding="UTF-8"?>
<programlisting xmlns="http://docbook.org/ns/docbook" version="5.0">
<emphasis role="csdtag">&lt;CsoundSynthesizer&gt;</emphasis>
<emphasis role="csdtag">&lt;CsOptions&gt;</emphasis>
-d -o dac
<emphasis role="csdtag">&lt;/CsOptions&gt;</emphasis>
<emphasis role="csdtag">&lt;CsInstruments&gt;</emphasis>
<emphasis role="op">/</emphasis><emphasis role="op">*</emphasis> <emphasis role="ohdr">ksmps</emphasis> needs to be an integer div of
   hopsize <emphasis role="op">*</emphasis><emphasis role="op">/</emphasis>
<emphasis role="ohdr">ksmps</emphasis> <emphasis role="op">=</emphasis> 64

<emphasis role="oblock">instr</emphasis> 1

 ihopsize <emphasis role="op">=</emphasis> 256   <emphasis role="comment">; hopsize</emphasis>
 ifftsize <emphasis role="op">=</emphasis> 1024  <emphasis role="comment">; FFT size </emphasis>
 iolaps <emphasis role="op">=</emphasis> ifftsize<emphasis role="op">/</emphasis>ihopsize <emphasis role="comment">; overlaps</emphasis>
 ibw <emphasis role="op">=</emphasis> <emphasis role="ohdr">sr</emphasis><emphasis role="op">/</emphasis>ifftsize <emphasis role="comment">; bin bandwidth</emphasis>
 kcnt <emphasis role="opc">init</emphasis> 0    <emphasis role="comment">; counting vars</emphasis>
 krow <emphasis role="opc">init</emphasis> 0

 kOla[] <emphasis role="opc">init</emphasis> ifftsize <emphasis role="comment">; overlap-add buffer</emphasis>
 kIn[] <emphasis role="opc">init</emphasis> ifftsize  <emphasis role="comment">; input buffer</emphasis>
 kOut[][] <emphasis role="opc">init</emphasis> iolaps, ifftsize <emphasis role="comment">; output buffers</emphasis>

 a1 <emphasis role="opc">diskin2</emphasis> "fox.wav",1,0,1 <emphasis role="comment">; audio input</emphasis>

 <emphasis role="op">/</emphasis><emphasis role="op">*</emphasis> every hopsize samples <emphasis role="op">*</emphasis><emphasis role="op">/</emphasis>
 <emphasis role="octrl">if</emphasis> kcnt <emphasis role="op">==</emphasis> ihopsize then  
   <emphasis role="op">/</emphasis><emphasis role="op">*</emphasis> <emphasis role="opc">window</emphasis> and take FFT <emphasis role="op">*</emphasis><emphasis role="op">/</emphasis>
   kWin[] <emphasis role="opc">window</emphasis> kIn,krow<emphasis role="op">*</emphasis>ihopsize
   kSpec[] <emphasis role="opc">rfft</emphasis> kWin
   
   kSpec <emphasis role="opc">rect2pol</emphasis> kSpec 
   
   <emphasis role="op">/</emphasis><emphasis role="op">*</emphasis> reduce <emphasis role="opc">mags</emphasis> between high and low freqs <emphasis role="op">*</emphasis><emphasis role="op">/</emphasis>
   ilow <emphasis role="op">=</emphasis> 0
   ihigh <emphasis role="op">=</emphasis> 1000
   ki <emphasis role="op">=</emphasis> <emphasis role="opc">int</emphasis>(ilow<emphasis role="op">/</emphasis>ibw)
   until ki <emphasis role="op">&gt;=</emphasis> <emphasis role="opc">int</emphasis>(ihigh<emphasis role="op">/</emphasis>ibw) do
     kSpec[ki] <emphasis role="op">=</emphasis> kSpec[ki]<emphasis role="op">*</emphasis>0.1
     ki <emphasis role="op">+</emphasis><emphasis role="op">=</emphasis> 2
   od
   
   kSpec <emphasis role="opc">pol2rect</emphasis> kSpec
   
   <emphasis role="op">/</emphasis><emphasis role="op">*</emphasis> IFFT <emphasis role="op">+</emphasis> <emphasis role="opc">window</emphasis> <emphasis role="op">*</emphasis><emphasis role="op">/</emphasis>
   kRow[] <emphasis role="opc">rifft</emphasis> kSpec
   kWin <emphasis role="opc">window</emphasis> kRow, krow<emphasis role="op">*</emphasis>ihopsize
   <emphasis role="op">/</emphasis><emphasis role="op">*</emphasis> place it on <emphasis role="opc">out</emphasis> buffer <emphasis role="op">*</emphasis><emphasis role="op">/</emphasis>
   kOut <emphasis role="opc">setrow</emphasis> kWin, krow

   <emphasis role="op">/</emphasis><emphasis role="op">*</emphasis> zero the ola buffer <emphasis role="op">*</emphasis><emphasis role="op">/</emphasis>
   kOla <emphasis role="op">=</emphasis> 0
   <emphasis role="op">/</emphasis><emphasis role="op">*</emphasis> overlap<emphasis role="op">-</emphasis>add <emphasis role="op">*</emphasis><emphasis role="op">/</emphasis>
   ki <emphasis role="op">=</emphasis> 0
   until ki <emphasis role="op">==</emphasis> iolaps do
     kRow <emphasis role="opc">getrow</emphasis> kOut, ki
     kOla <emphasis role="op">=</emphasis> kOla <emphasis role="op">+</emphasis> kRow
     ki <emphasis role="op">+</emphasis><emphasis role="op">=</emphasis> 1
   od
  
  <emphasis role="op">/</emphasis><emphasis role="op">*</emphasis> update counters <emphasis role="op">*</emphasis><emphasis role="op">/</emphasis> 
  krow <emphasis role="op">=</emphasis> (krow<emphasis role="op">+</emphasis>1)<emphasis role="op">%</emphasis>iolaps
  kcnt <emphasis role="op">=</emphasis> 0
 <emphasis role="octrl">endif</emphasis>

 <emphasis role="op">/</emphasis><emphasis role="op">*</emphasis> shift audio <emphasis role="opc">in</emphasis><emphasis role="op">/</emphasis><emphasis role="opc">out</emphasis> of buffers <emphasis role="op">*</emphasis><emphasis role="op">/</emphasis>
 kIn <emphasis role="opc">shiftin</emphasis> a1
 a2 <emphasis role="opc">shiftout</emphasis> kOla
    <emphasis role="opc">out</emphasis> a2<emphasis role="op">/</emphasis>iolaps

 <emphasis role="op">/</emphasis><emphasis role="op">*</emphasis> increment counter <emphasis role="op">*</emphasis><emphasis role="op">/</emphasis>
 kcnt <emphasis role="op">+</emphasis><emphasis role="op">=</emphasis> <emphasis role="ohdr">ksmps</emphasis>

<emphasis role="oblock">endin</emphasis>

<emphasis role="csdtag">&lt;/CsInstruments&gt;</emphasis>
<emphasis role="csdtag">&lt;CsScore&gt;</emphasis>
<emphasis role="stamnt">i</emphasis>1 0 10
<emphasis role="csdtag">&lt;/CsScore&gt;</emphasis>
<emphasis role="csdtag">&lt;/CsoundSynthesizer&gt;</emphasis>
</programlisting>
