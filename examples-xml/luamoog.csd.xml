<?xml version="1.0" encoding="UTF-8"?>
<programlisting xmlns="http://docbook.org/ns/docbook" version="5.0">
<emphasis role="csdtag">&lt;CsoundSynthesizer&gt;</emphasis>
<emphasis role="csdtag">&lt;CsInstruments&gt;</emphasis>
<emphasis role="ohdr">sr</emphasis> <emphasis role="op">=</emphasis>    48000
<emphasis role="ohdr">ksmps</emphasis> <emphasis role="op">=</emphasis>   100
<emphasis role="ohdr">nchnls</emphasis> <emphasis role="op">=</emphasis>    1

    gibegan     <emphasis role="opc">rtclock</emphasis>

    <emphasis role="opc">lua_opdef</emphasis>   "moogladder", {{
local ffi <emphasis role="op">=</emphasis> require("ffi")
local math <emphasis role="op">=</emphasis> require("math")
local string <emphasis role="op">=</emphasis> require("string")
local csoundApi <emphasis role="op">=</emphasis> ffi.load('csound64.dll.5.2')
ffi.cdef[[
    <emphasis role="opc">int</emphasis> csoundGetKsmps(void <emphasis role="op">*</emphasis>)<emphasis role="comment">;</emphasis>
    double csoundGetSr(void <emphasis role="op">*</emphasis>)<emphasis role="comment">;</emphasis>
    struct moogladder_t {
      double <emphasis role="op">*</emphasis><emphasis role="opc">out</emphasis><emphasis role="comment">;</emphasis>
      double <emphasis role="op">*</emphasis>inp<emphasis role="comment">;</emphasis>
      double <emphasis role="op">*</emphasis>freq<emphasis role="comment">;</emphasis>
      double <emphasis role="op">*</emphasis>res<emphasis role="comment">;</emphasis>
      double <emphasis role="op">*</emphasis>istor<emphasis role="comment">;</emphasis>
      double <emphasis role="ohdr">sr</emphasis><emphasis role="comment">;</emphasis>
      double <emphasis role="ohdr">ksmps</emphasis><emphasis role="comment">;</emphasis>
      double thermal<emphasis role="comment">;</emphasis>
      double f<emphasis role="comment">;</emphasis>
      double fc<emphasis role="comment">;</emphasis>
      double fc2<emphasis role="comment">;</emphasis>
      double fc3<emphasis role="comment">;</emphasis>
      double fcr<emphasis role="comment">;</emphasis>
      double acr<emphasis role="comment">;</emphasis>
      double tune<emphasis role="comment">;</emphasis>
      double res4<emphasis role="comment">;</emphasis>
      double input<emphasis role="comment">;</emphasis>
      double <emphasis role="opc">i</emphasis><emphasis role="comment">;</emphasis>
      double j<emphasis role="comment">;</emphasis>
      double <emphasis role="opc">k</emphasis><emphasis role="comment">;</emphasis>
      double kk<emphasis role="comment">;</emphasis>
      double stg[6]<emphasis role="comment">;</emphasis>
      double delay[6]<emphasis role="comment">;</emphasis>
      double tanhstg[6]<emphasis role="comment">;</emphasis>
    }<emphasis role="comment">;</emphasis>
]]

local moogladder_ct <emphasis role="op">=</emphasis> ffi.typeof('struct moogladder_t <emphasis role="op">*</emphasis>')

function moogladder_init(csound, opcode, carguments)
    local <emphasis role="opc">p</emphasis> <emphasis role="op">=</emphasis> ffi.cast(moogladder_ct, carguments)
    p.sr <emphasis role="op">=</emphasis> csoundApi.csoundGetSr(csound)
    p.ksmps <emphasis role="op">=</emphasis> csoundApi.csoundGetKsmps(csound)
    <emphasis role="octrl">if</emphasis> p.istor[0] <emphasis role="op">==</emphasis> 0 then
        for <emphasis role="opc">i</emphasis> <emphasis role="op">=</emphasis> 0, 5 do
            p.delay[i] <emphasis role="op">=</emphasis> 0.0
        end
        for <emphasis role="opc">i</emphasis> <emphasis role="op">=</emphasis> 0, 3 do
            p.tanhstg[i] <emphasis role="op">=</emphasis> 0.0
        end
    end
    <emphasis role="opc">return</emphasis> 0
end

function moogladder_kontrol(csound, opcode, carguments)
    local <emphasis role="opc">p</emphasis> <emphasis role="op">=</emphasis> ffi.cast(moogladder_ct, carguments)
    <emphasis role="op">-</emphasis><emphasis role="op">-</emphasis> transistor thermal voltage
    p.thermal <emphasis role="op">=</emphasis> 1.0 <emphasis role="op">/</emphasis> 40000.0
    <emphasis role="octrl">if</emphasis> p.res[0] <emphasis role="op">&lt;</emphasis> 0.0 then
        p.res[0] <emphasis role="op">=</emphasis> 0.0
    end
    <emphasis role="op">-</emphasis><emphasis role="op">-</emphasis> <emphasis role="ohdr">sr</emphasis> is half the actual filter sampling rate
    p.fc <emphasis role="op">=</emphasis> p.freq[0] <emphasis role="op">/</emphasis> p.sr
    p.f <emphasis role="op">=</emphasis> p.fc <emphasis role="op">/</emphasis> 2.0
    p.fc2 <emphasis role="op">=</emphasis> p.fc <emphasis role="op">*</emphasis> p.fc
    p.fc3 <emphasis role="op">=</emphasis> p.fc2 <emphasis role="op">*</emphasis> p.fc
    <emphasis role="op">-</emphasis><emphasis role="op">-</emphasis> frequency <emphasis role="op">&amp;</emphasis> amplitude correction
    p.fcr <emphasis role="op">=</emphasis> 1.873 <emphasis role="op">*</emphasis> p.fc3 <emphasis role="op">+</emphasis> 0.4955 <emphasis role="op">*</emphasis> p.fc2 <emphasis role="op">-</emphasis> 0.6490 <emphasis role="op">*</emphasis> p.fc <emphasis role="op">+</emphasis> 0.9988
    p.acr <emphasis role="op">=</emphasis> <emphasis role="op">-</emphasis>3.9364 <emphasis role="op">*</emphasis> p.fc2 <emphasis role="op">+</emphasis> 1.8409 <emphasis role="op">*</emphasis> p.fc <emphasis role="op">+</emphasis> 0.9968
    <emphasis role="op">-</emphasis><emphasis role="op">-</emphasis> filter tuning
    p.tune <emphasis role="op">=</emphasis> (1.0 <emphasis role="op">-</emphasis> math.exp(<emphasis role="op">-</emphasis>(2.0 <emphasis role="op">*</emphasis> math.pi <emphasis role="op">*</emphasis> p.f <emphasis role="op">*</emphasis> p.fcr))) <emphasis role="op">/</emphasis> p.thermal
    p.res4 <emphasis role="op">=</emphasis> 4.0 <emphasis role="op">*</emphasis> p.res[0] <emphasis role="op">*</emphasis> p.acr
    <emphasis role="op">-</emphasis><emphasis role="op">-</emphasis> Nested 'for' loops crash, not sure why.
    <emphasis role="op">-</emphasis><emphasis role="op">-</emphasis> Local loop variables also are problematic.
    <emphasis role="op">-</emphasis><emphasis role="op">-</emphasis> Lower<emphasis role="op">-</emphasis>level loop constructs don't crash.
    p.i <emphasis role="op">=</emphasis> 0
    while p.i <emphasis role="op">&lt;</emphasis> p.ksmps do
        p.j <emphasis role="op">=</emphasis> 0
        while p.j <emphasis role="op">&lt;</emphasis> 2 do
            p.k <emphasis role="op">=</emphasis> 0
            while p.k <emphasis role="op">&lt;</emphasis> 4 do
                <emphasis role="octrl">if</emphasis> p.k <emphasis role="op">==</emphasis> 0 then
                    p.input <emphasis role="op">=</emphasis> p.inp[p.i] <emphasis role="op">-</emphasis> p.res4 <emphasis role="op">*</emphasis> p.delay[5]
                    p.stg[p.k] <emphasis role="op">=</emphasis> p.delay[p.k] <emphasis role="op">+</emphasis> p.tune <emphasis role="op">*</emphasis> (math.tanh(p.input <emphasis role="op">*</emphasis> p.thermal) <emphasis role="op">-</emphasis> p.tanhstg[p.k])
                <emphasis role="octrl">else</emphasis>
                    p.input <emphasis role="op">=</emphasis> p.stg[p.k <emphasis role="op">-</emphasis> 1]
                    p.tanhstg[p.k <emphasis role="op">-</emphasis> 1] <emphasis role="op">=</emphasis> math.tanh(p.input <emphasis role="op">*</emphasis> p.thermal)
                    <emphasis role="octrl">if</emphasis> p.k <emphasis role="op">&lt;</emphasis> 3 then
                        p.kk <emphasis role="op">=</emphasis> p.tanhstg[p.k]
                    <emphasis role="octrl">else</emphasis>
                        p.kk <emphasis role="op">=</emphasis> math.tanh(p.delay[p.k] <emphasis role="op">*</emphasis> p.thermal)
                    end
                    p.stg[p.k] <emphasis role="op">=</emphasis> p.delay[p.k] <emphasis role="op">+</emphasis> p.tune <emphasis role="op">*</emphasis> (p.tanhstg[p.k <emphasis role="op">-</emphasis> 1] <emphasis role="op">-</emphasis> p.kk)
                end
                p.delay[p.k] <emphasis role="op">=</emphasis> p.stg[p.k]
                p.k <emphasis role="op">=</emphasis> p.k <emphasis role="op">+</emphasis> 1
            end
            <emphasis role="op">-</emphasis><emphasis role="op">-</emphasis> 1<emphasis role="op">/</emphasis>2<emphasis role="op">-</emphasis>sample <emphasis role="opc">delay</emphasis> for phase compensation
            p.delay[5] <emphasis role="op">=</emphasis> (p.stg[3] <emphasis role="op">+</emphasis> p.delay[4]) <emphasis role="op">*</emphasis> 0.5
            p.delay[4] <emphasis role="op">=</emphasis> p.stg[3]
            p.j <emphasis role="op">=</emphasis> p.j <emphasis role="op">+</emphasis> 1
        end
        p.out[p.i] <emphasis role="op">=</emphasis> p.delay[5]
        p.i <emphasis role="op">=</emphasis> p.i <emphasis role="op">+</emphasis> 1
    end
    <emphasis role="opc">return</emphasis> 0
end
}}

<emphasis role="op">/</emphasis><emphasis role="op">*</emphasis>
Moogladder <emphasis role="op">-</emphasis> An improved implementation of the Moog ladder filter

DESCRIPTION
This is an new digital implementation of the Moog ladder filter based on the work of Antti Huovilainen,
described <emphasis role="opc">in</emphasis> the paper \"Non<emphasis role="op">-</emphasis>Linear Digital Implementation of the Moog Ladder Filter\" (Proceedings of DaFX04, Univ of Napoli).
This implementation is probably <emphasis role="opc">a</emphasis> more accurate digital representation of the original analogue filter.
This is version 2 (revised 14<emphasis role="op">/</emphasis>DEC<emphasis role="op">/</emphasis>04), with improved amplitude<emphasis role="op">/</emphasis>resonance scaling and frequency correction using <emphasis role="opc">a</emphasis> couple of polynomials,as suggested by Antti.

SYNTAX
ar  Moogladder  asig, kcf, kres

PERFORMANCE
asig <emphasis role="op">-</emphasis> input signal
kcf <emphasis role="op">-</emphasis> cutoff frequency (Hz)
kres <emphasis role="op">-</emphasis> resonance (0 <emphasis role="op">-</emphasis> 1).

CREDITS
Victor Lazzarini
<emphasis role="op">*</emphasis><emphasis role="op">/</emphasis>

                    <emphasis role="oblock">opcode</emphasis>  moogladderu, a, akk
asig, kcf, kres     <emphasis role="opc">xin</emphasis>
                    <emphasis role="opc">setksmps</emphasis>    1
ipi                 <emphasis role="op">=</emphasis>           4 <emphasis role="op">*</emphasis> <emphasis role="opc">taninv</emphasis>(1)
<emphasis role="op">/</emphasis><emphasis role="op">*</emphasis> filter delays <emphasis role="op">*</emphasis><emphasis role="op">/</emphasis>
az1                 <emphasis role="opc">init</emphasis>        0
az2                 <emphasis role="opc">init</emphasis>        0
az3                 <emphasis role="opc">init</emphasis>        0
az4                 <emphasis role="opc">init</emphasis>        0
az5                 <emphasis role="opc">init</emphasis>        0
ay4                 <emphasis role="opc">init</emphasis>        0
amf                 <emphasis role="opc">init</emphasis>        0
                    <emphasis role="octrl">if</emphasis>          kres <emphasis role="op">&gt;</emphasis> 1 then
kres                <emphasis role="op">=</emphasis>           1
                    <emphasis role="octrl">elseif</emphasis>      kres <emphasis role="op">&lt;</emphasis> 0 then
kres                <emphasis role="op">=</emphasis>           0
                    <emphasis role="octrl">endif</emphasis>
<emphasis role="op">/</emphasis><emphasis role="op">*</emphasis> twice the \'thermal voltage of <emphasis role="opc">a</emphasis> transistor\' <emphasis role="op">*</emphasis><emphasis role="op">/</emphasis>
i2v                 <emphasis role="op">=</emphasis>           40000
<emphasis role="op">/</emphasis><emphasis role="op">*</emphasis> <emphasis role="ohdr">sr</emphasis> is half the actual filter sampling rate  <emphasis role="op">*</emphasis><emphasis role="op">/</emphasis>
kfc                 <emphasis role="op">=</emphasis>           kcf<emphasis role="op">/</emphasis><emphasis role="ohdr">sr</emphasis>
kf                  <emphasis role="op">=</emphasis>           kcf<emphasis role="op">/</emphasis>(<emphasis role="ohdr">sr</emphasis><emphasis role="op">*</emphasis>2)
<emphasis role="op">/</emphasis><emphasis role="op">*</emphasis> frequency <emphasis role="op">&amp;</emphasis> amplitude correction  <emphasis role="op">*</emphasis><emphasis role="op">/</emphasis>
kfcr                <emphasis role="op">=</emphasis>           1.8730 <emphasis role="op">*</emphasis> (kfc^3) <emphasis role="op">+</emphasis> 0.4955 <emphasis role="op">*</emphasis> (kfc^2) <emphasis role="op">-</emphasis> 0.6490 <emphasis role="op">*</emphasis> kfc <emphasis role="op">+</emphasis> 0.9988
kacr                <emphasis role="op">=</emphasis>           <emphasis role="op">-</emphasis>3.9364 <emphasis role="op">*</emphasis> (kfc^2) <emphasis role="op">+</emphasis> 1.8409 <emphasis role="op">*</emphasis> kfc <emphasis role="op">+</emphasis> 0.9968<emphasis role="comment">;</emphasis>
<emphasis role="op">/</emphasis><emphasis role="op">*</emphasis> filter tuning  <emphasis role="op">*</emphasis><emphasis role="op">/</emphasis>
k2vg                <emphasis role="op">=</emphasis>           i2v <emphasis role="op">*</emphasis> (1 <emphasis role="op">-</emphasis> <emphasis role="opc">exp</emphasis>(<emphasis role="op">-</emphasis>2 <emphasis role="op">*</emphasis> ipi <emphasis role="op">*</emphasis> kfcr <emphasis role="op">*</emphasis> kf))
<emphasis role="op">/</emphasis><emphasis role="op">*</emphasis> cascade of 4 1st order sections         <emphasis role="op">*</emphasis><emphasis role="op">/</emphasis>
ay1                 <emphasis role="op">=</emphasis>           az1 <emphasis role="op">+</emphasis> k2vg <emphasis role="op">*</emphasis> (<emphasis role="opc">tanh</emphasis>((asig <emphasis role="op">-</emphasis> 4 <emphasis role="op">*</emphasis> kres <emphasis role="op">*</emphasis> amf <emphasis role="op">*</emphasis> kacr) <emphasis role="op">/</emphasis> i2v) <emphasis role="op">-</emphasis> <emphasis role="opc">tanh</emphasis>(az1 <emphasis role="op">/</emphasis> i2v))
az1                 <emphasis role="op">=</emphasis>           ay1
ay2                 <emphasis role="op">=</emphasis>           az2 <emphasis role="op">+</emphasis> k2vg <emphasis role="op">*</emphasis> (<emphasis role="opc">tanh</emphasis>(ay1 <emphasis role="op">/</emphasis> i2v) <emphasis role="op">-</emphasis> <emphasis role="opc">tanh</emphasis>(az2 <emphasis role="op">/</emphasis> i2v ))
az2                 <emphasis role="op">=</emphasis>           ay2
ay3                 <emphasis role="op">=</emphasis>           az3 <emphasis role="op">+</emphasis> k2vg <emphasis role="op">*</emphasis> (<emphasis role="opc">tanh</emphasis>(ay2 <emphasis role="op">/</emphasis> i2v) <emphasis role="op">-</emphasis> <emphasis role="opc">tanh</emphasis>(az3 <emphasis role="op">/</emphasis> i2v))
az3                 <emphasis role="op">=</emphasis>           ay3
ay4                 <emphasis role="op">=</emphasis>           az4 <emphasis role="op">+</emphasis> k2vg <emphasis role="op">*</emphasis> (<emphasis role="opc">tanh</emphasis>(ay3 <emphasis role="op">/</emphasis> i2v) <emphasis role="op">-</emphasis> <emphasis role="opc">tanh</emphasis>(az4 <emphasis role="op">/</emphasis> i2v))
az4                 <emphasis role="op">=</emphasis>           ay4
<emphasis role="op">/</emphasis><emphasis role="op">*</emphasis> 1<emphasis role="op">/</emphasis>2<emphasis role="op">-</emphasis>sample <emphasis role="opc">delay</emphasis> for phase compensation  <emphasis role="op">*</emphasis><emphasis role="op">/</emphasis>
amf                 <emphasis role="op">=</emphasis>           (ay4 <emphasis role="op">+</emphasis> az5) <emphasis role="op">*</emphasis>0.5
az5                 <emphasis role="op">=</emphasis>           ay4
<emphasis role="op">/</emphasis><emphasis role="op">*</emphasis> oversampling  <emphasis role="op">*</emphasis><emphasis role="op">/</emphasis>
ay1                 <emphasis role="op">=</emphasis>           az1 <emphasis role="op">+</emphasis> k2vg <emphasis role="op">*</emphasis> (<emphasis role="opc">tanh</emphasis>((asig <emphasis role="op">-</emphasis> 4 <emphasis role="op">*</emphasis> kres <emphasis role="op">*</emphasis> amf <emphasis role="op">*</emphasis> kacr) <emphasis role="op">/</emphasis> i2v) <emphasis role="op">-</emphasis> <emphasis role="opc">tanh</emphasis>(az1 <emphasis role="op">/</emphasis> i2v))
az1                 <emphasis role="op">=</emphasis>           ay1
ay2                 <emphasis role="op">=</emphasis>           az2 <emphasis role="op">+</emphasis> k2vg <emphasis role="op">*</emphasis> (<emphasis role="opc">tanh</emphasis>(ay1 <emphasis role="op">/</emphasis> i2v) <emphasis role="op">-</emphasis> <emphasis role="opc">tanh</emphasis>(az2 <emphasis role="op">/</emphasis> i2v ))
az2                 <emphasis role="op">=</emphasis>           ay2
ay3                 <emphasis role="op">=</emphasis>           az3 <emphasis role="op">+</emphasis> k2vg <emphasis role="op">*</emphasis> (<emphasis role="opc">tanh</emphasis>(ay2 <emphasis role="op">/</emphasis> i2v) <emphasis role="op">-</emphasis> <emphasis role="opc">tanh</emphasis>(az3 <emphasis role="op">/</emphasis> i2v))
az3                 <emphasis role="op">=</emphasis>           ay3
ay4                 <emphasis role="op">=</emphasis>           az4 <emphasis role="op">+</emphasis> k2vg <emphasis role="op">*</emphasis> (<emphasis role="opc">tanh</emphasis>(ay3 <emphasis role="op">/</emphasis> i2v) <emphasis role="op">-</emphasis> <emphasis role="opc">tanh</emphasis>(az4 <emphasis role="op">/</emphasis> i2v))
az4                 <emphasis role="op">=</emphasis>           ay4
amf                 <emphasis role="op">=</emphasis>           (ay4 <emphasis role="op">+</emphasis> az5) <emphasis role="op">*</emphasis> 0.5
az5                 <emphasis role="op">=</emphasis>           ay4
                    <emphasis role="opc">xout</emphasis>        amf
                    <emphasis role="oblock">endop</emphasis>

<emphasis role="oblock">instr</emphasis> 1
                <emphasis role="opc">prints</emphasis>      "No filter.\n"
	kfe         <emphasis role="opc">expseg</emphasis>      500, p3<emphasis role="op">*</emphasis>0.9, 1800, p3<emphasis role="op">*</emphasis>0.1, 3000
    kenv        <emphasis role="opc">linen</emphasis>       10000, 0.05, p3, 0.05
    asig        <emphasis role="opc">buzz</emphasis>        kenv, 100, <emphasis role="ohdr">sr</emphasis><emphasis role="op">/</emphasis>(200), 1
    <emphasis role="comment">; afil      moogladder  asig, kfe, 1</emphasis>
                <emphasis role="opc">out</emphasis>         asig
<emphasis role="oblock">endin</emphasis>

<emphasis role="oblock">instr</emphasis> 2
                <emphasis role="opc">prints</emphasis>      "Native moogladder.\n"
	kfe         <emphasis role="opc">expseg</emphasis>      500, p3<emphasis role="op">*</emphasis>0.9, 1800, p3<emphasis role="op">*</emphasis>0.1, 3000
    kenv        <emphasis role="opc">linen</emphasis>       10000, 0.05, p3, 0.05
    asig        <emphasis role="opc">buzz</emphasis>        kenv, 100, <emphasis role="ohdr">sr</emphasis><emphasis role="op">/</emphasis>(200), 1
    afil        <emphasis role="opc">moogladder</emphasis>  asig, kfe, 1
                <emphasis role="opc">out</emphasis>         afil
<emphasis role="oblock">endin</emphasis>

<emphasis role="oblock">instr</emphasis> 3
                <emphasis role="opc">prints</emphasis>      "UDO moogladder.\n"
	kfe         <emphasis role="opc">expseg</emphasis>      500, p3<emphasis role="op">*</emphasis>0.9, 1800, p3<emphasis role="op">*</emphasis>0.1, 3000
    kenv        <emphasis role="opc">linen</emphasis>       10000, 0.05, p3, 0.05
    asig        <emphasis role="opc">buzz</emphasis>        kenv, 100, <emphasis role="ohdr">sr</emphasis><emphasis role="op">/</emphasis>(200), 1
    afil        moogladderu asig, kfe, 1
                <emphasis role="opc">out</emphasis>         afil
<emphasis role="oblock">endin</emphasis>

<emphasis role="oblock">instr</emphasis> 4
                <emphasis role="opc">prints</emphasis>      "Lua moogladder.\n"
    kres        <emphasis role="opc">init</emphasis>        1
    istor       <emphasis role="opc">init</emphasis>        0
	kfe         <emphasis role="opc">expseg</emphasis>      500, p3<emphasis role="op">*</emphasis>0.9, 1800, p3<emphasis role="op">*</emphasis>0.1, 3000
    kenv        <emphasis role="opc">linen</emphasis>       10000, 0.05, p3, 0.05
    asig        <emphasis role="opc">buzz</emphasis>        kenv, 100, <emphasis role="ohdr">sr</emphasis><emphasis role="op">/</emphasis>(200), 1
    afil        <emphasis role="opc">init</emphasis>        0
                <emphasis role="opc">lua_ikopcall</emphasis>    "moogladder", afil, asig, kfe, kres, istor
                <emphasis role="opc">out</emphasis>         afil
<emphasis role="oblock">endin</emphasis>

<emphasis role="oblock">instr</emphasis> 5
    giended     <emphasis role="opc">rtclock</emphasis>
    ielapsed    <emphasis role="op">=</emphasis>           giended <emphasis role="op">-</emphasis> gibegan
                <emphasis role="opc">print</emphasis>       ielapsed
    gibegan     <emphasis role="opc">rtclock</emphasis>
<emphasis role="oblock">endin</emphasis>

<emphasis role="csdtag">&lt;/CsInstruments&gt;</emphasis>
<emphasis role="csdtag">&lt;CsScore&gt;</emphasis>
<emphasis role="stamnt">f</emphasis> 1     0 65536 10 1
<emphasis role="stamnt">i</emphasis> 5.1   0   1
<emphasis role="stamnt">i</emphasis> 4     1   20
<emphasis role="stamnt">i</emphasis> 5.2   21  1
<emphasis role="stamnt">i</emphasis> 4     22  20
<emphasis role="stamnt">i</emphasis> 5.3   42  1
<emphasis role="stamnt">i</emphasis> 2     43  20
<emphasis role="stamnt">i</emphasis> 5.4   63  1
<emphasis role="stamnt">i</emphasis> 2     64  20
<emphasis role="stamnt">i</emphasis> 5.5   84  1
<emphasis role="stamnt">i</emphasis> 3     85  20
<emphasis role="stamnt">i</emphasis> 5.6   105 1
<emphasis role="stamnt">i</emphasis> 3     106 20
<emphasis role="stamnt">i</emphasis> 5.7   126 1
<emphasis role="stamnt">i</emphasis> 1     127 20
<emphasis role="stamnt">i</emphasis> 5.8   147 1
<emphasis role="stamnt">i</emphasis> 1     148 20
<emphasis role="stamnt">i</emphasis> 5.9   168 1
<emphasis role="stamnt">i</emphasis> 4     169 20
<emphasis role="stamnt">i</emphasis> 4     170 20
<emphasis role="stamnt">i</emphasis> 4     171 20
<emphasis role="stamnt">e</emphasis>
<emphasis role="csdtag">&lt;/CsScore&gt;</emphasis>
<emphasis role="csdtag">&lt;/CsoundSynthesizer&gt;</emphasis>
</programlisting>
