<?xml version="1.0" encoding="UTF-8"?>
<!--<section id="CommandFlags">
  <title>The Csound Command</title>-->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" id="CommandFlags">
    <indexterm id="IndexCommandFlags"><primary>Command Line Flags</primary></indexterm>
    <refmeta>
      <refentrytitle>Csound command line</refentrytitle>
    </refmeta>

    <refnamediv>
      <refname>csound</refname>
  <!--    <refpurpose>
        Csound command.
      </refpurpose> -->
    </refnamediv>

    <refsect1>
      <title>Description</title>
      <para>
        The <emphasis>csound</emphasis> command executes Csound.
      </para>
    </refsect1>

    <refsect1>
      <title>Syntax</title>
      <synopsis><command>csound</command> <arg><option>flags</option></arg> <arg>orchname</arg> <arg>scorename</arg></synopsis>
      <synopsis><command>csound</command> <arg><option>flags</option></arg> <arg>csdfilename</arg></synopsis>
    </refsect1>

    <refsect1>
      <title>Csound command line flags</title>
      <para>
        Listed below are the command line flags available in Csound6 in alphabetical order. Various platform
        implementations may not react the same way to different flags! You can view the command line flags organized by category in <link linkend="CommandFlagsCategory"><citetitle>Command-line Flags (by Category)</citetitle></link>.
      </para>
      <para>
        The command line arguments are of 2 types: <emphasis>flags</emphasis> arguments (beginning with a <quote>-</quote>,<quote>--</quote> or <quote>-+</quote>), and <emphasis>name</emphasis> arguments (such as filenames). Certain flag arguments take a following name or numeric argument. Flags that start with <quote>--</quote> and <quote>-+</quote> usually take an argument themselves using <quote>=</quote>.
      </para>

      <variablelist>
        <title>Command-line Flags</title>
        <varlistentry id="FlagsMinusAt">
          <term>-@ FILE<indexterm id="IndexMinusAt"><primary>-@</primary></indexterm></term>
          <listitem>
            <para>
              Provide an extended command-line in file <quote>FILE</quote>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry id="FlagsMinus3">
          <term>-3<indexterm id="IndexMinus3"><primary>-3</primary></indexterm>, --format=24bit<indexterm id="IndexMinusFormat24bit"><primary>--format=24bit</primary></indexterm></term>
          <listitem>
            <para>
              Use 24-bit audio samples.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry id="FlagsMinus8">
          <term>-8<indexterm id="IndexMinus8"><primary>-8</primary></indexterm>, --format=uchar<indexterm id="IndexMinusFormatUchar"><primary>--format=uchar</primary></indexterm></term>
          <listitem>
            <para>
              Use 8-bit unsigned character audio samples.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry id="FlagsMinusFormat">
          <term>--format=<emphasis>type</emphasis><indexterm id="IndexMinusFormat"><primary>--format</primary></indexterm></term>
          <listitem>
            <para>
              Set the audio file output format to one of the formats
              available in libsndfile.  At present the list is
              aiff, au, avr, caf, flac, htk, ircam, mat4, mat5, MPC,
              nist, ogg, paf, pvf, raw, sd2, sds, svx, voc, w64, W64,
              wav, wavex, WVE, xi.
              Can also be used as --format=type:format or --format=format:type
              to set both the file type (wav, aiff, etc.) and sample format
              (short, long, float, etc.) at the same time.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry id="FlagsMinusUpperA">
          <term>-A<indexterm id="IndexMinusUpperA"><primary>-A</primary></indexterm>, --aiff<indexterm id="IndexMinusAiff"><primary>--aiff</primary></indexterm>, --format=aiff<indexterm id="IndexMinusFAiff"><primary>--format=aiff</primary></indexterm></term>
          <listitem>
            <para>
              Write an AIFF format soundfile. Use with the <link linkend="FlagsMinusLowerC"><citetitle>-c</citetitle></link>, <link linkend="FlagsMinusLowerS"><citetitle>-s</citetitle></link>, <link linkend="FlagsMinusLowerL"><citetitle>-l</citetitle></link>, or <link linkend="FlagsMinusLowerF"><citetitle>-f</citetitle></link> flags.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry id="FlagsMinusLowerA">
          <term>-a<indexterm id="IndexMinusLowerA"><primary>-a</primary></indexterm>, --format=alaw<indexterm id="IndexMinusFormatAlaw"><primary>--format=alaw</primary></indexterm></term>
          <listitem>
            <para>
              Use a-law audio samples.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry id="FlagsMinusUpperB">
          <term>-B NUM<indexterm id="IndexMinusUpperB"><primary>-B</primary></indexterm>, --hardwarebufsamps=NUM<indexterm id="IndexMinusHardwarebufsamps"><primary>--hardwarebufsamps</primary></indexterm></term>
          <listitem>
            <para>
              Number of audio sample-frames held in the DAC <emphasis>hardware</emphasis> buffer. This is a threshold on which <emphasis>software</emphasis> audio I/O (above) will wait before returning. A small number reduces audio I/O delay; but the value is often hardware limited, and small values will risk data lates. In the case of portaudio output (the default real-time output), the -B parameter (more precisely, -B / sr) is passed as the "suggested latency" value. Other than that, Csound has no control over how PortAudio interprets the parameter. The default is 1024 on Linux, 4096 on Mac OS X and 16384 on Windows.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry id="FlagsMinusLowerB">
          <term>-b NUM<indexterm id="IndexMinusLowerB"><primary>-b</primary></indexterm>, --iobufsamps=NUM<indexterm id="IndexMinusIobufsamps"><primary>--iobufsamps</primary></indexterm></term>
          <listitem>
            <para>
              Number of audio sample-frames per sound i/o <emphasis>software</emphasis> buffer. Large is efficient, but small will reduce audio I/O delay and improve the accuracy of the timing of real time events. The default is 256 on Linux, 1024 on MacOS X, and 4096 on Windows. In real-time performance, Csound waits on audio I/O on <emphasis>NUM</emphasis> boundaries. It also processes audio (and polls for other input like MIDI) on orchestra <emphasis>ksmps</emphasis> boundaries. The two can be made synchronous. For convenience, if NUM is negative, the effective value is <emphasis>ksmps * -NUM</emphasis> (audio synchronous with k-period boundaries). With NUM small (e.g. 1) polling is then frequent and also locked to fixed DAC sample boundaries.
            </para>
            <para>
              Note: if both -iadc and -odac are used at the same time (full duplex
              real time audio), the -b option should be set to an integer multiple
              of ksmps.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry id="FlagsMinusUpperC">
          <term>-C<indexterm id="IndexMinusUpperC"><primary>-C</primary></indexterm>, --cscore<indexterm id="IndexMinusCscore"><primary>--cscore</primary></indexterm></term>
          <listitem>
            <para>
              Use Cscore processing of the scorefile.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry id="FlagsMinusLowerC">
          <term>-c<indexterm id="IndexMinusLowerC"><primary>-c</primary></indexterm>, --format=schar<indexterm id="IndexMinusFormatSchar"><primary>--format=schar</primary></indexterm></term>
          <listitem>
            <para>
              Use 8-bit signed character audio samples.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusCsdLineNums">
          <term>--csd-line-nums=NUM<indexterm id="IndexMinusCsdLineNums"><primary>--csd-line-nums</primary></indexterm></term>
          <listitem>
            <para>
              Determines how line numbers are counted and displayed for error messages when processing a Csound Unified Document file (.csd).  This flag has no effect if separate orchestra and score files are used.  (Csound 5.08 and later).
              <itemizedlist>
                <listitem><para>0 = line numbers are relative to the beginning of the orchestra or score sections of the CSD</para></listitem>
                <listitem><para>1 = line numbers are relative to the beginning of the CSD file.  This is the default as of Csound 5.08.</para></listitem>
              </itemizedlist>
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusUpperD">
          <term>-D<indexterm id="IndexMinusUpperD"><primary>-D</primary></indexterm>, --defer-gen1<indexterm id="IndexMinusDefergen1"><primary>--defer-gen1</primary></indexterm></term>
          <listitem>
            <para>
              Defer GEN01 soundfile loads until performance time.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry id="FlagsMinusLowerD">
          <term>-d<indexterm id="IndexMinusLowerD"><primary>-d</primary></indexterm>, --nodisplays<indexterm id="IndexMinusNodisplays"><primary>--nodisplays</primary></indexterm></term>
          <listitem>
            <para>
              Suppress all displays. See <link linkend="FlagsCatMinusUpperO"><citetitle>-O</citetitle></link>
              if you want to save the log to a file.  <note>This option
              only works from the command line and not from .csound6rc or
              a CsOptions section of a  csd file.  It needs to be acted
              upon before sound proper starts.  It is ignored in .csoundrc
              and CsOptions.</note>
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsDaemon">
          <term>-d<indexterm id="IndexDaemon"><primary>--daemon</primary></indexterm></term>
          <listitem>
            <para>
              Run in daemon mode: do not exit if CSD/orchestra is not given, is empty or does not compile.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusMinusDevice">
          <term>--devices<indexterm id="IndexMinusMinusDevice"><primary>--devices[=in|out]</primary></indexterm></term>
          <listitem>
            <para> Gives a list of available audio devices and then
            exits.
            </para>
          </listitem>
        </varlistentry>            
        
          <varlistentry id="FlagsMinusMinusDevices">
          <term>--devices[=x]<indexterm id="IndexMinusMinusDevices"><primary>--devices</primary></indexterm></term>
          <listitem>
            <para>
              list audio devices (x=out, output devices only; x=in,
	      input; else input and output) and exit.
            </para>
          </listitem>
          </varlistentry>

        <varlistentry id="FlagsMinusDisplays">
          <term>--displays<indexterm id="IndexMinusDisplays"><primary>--displays</primary></indexterm></term>
          <listitem>
            <para>
              Enables displays, reverting the effect of any previous -d flag.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusDefaultPaths">
          <term>--default-paths<indexterm id="IndexMinusDefaultPaths"><primary>--no-default-paths</primary></indexterm></term>
          <listitem>
            <para>
              Reenables adding of directory of CSD/ORC/SCO to search paths,
              if it has been disabled by a previous <link linkend="FlagsMinusNoDefaultPaths"><citetitle>--no-default-paths</citetitle></link> (e.g. in <link linkend="CommandUnifileParFile"><citetitle>.csoundrc</citetitle></link>).
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusEnvEquals">
          <term>--env:NAME=VALUE<indexterm id="IndexMinusEnvEquals"><primary>--env:NAME=VALUE</primary></indexterm></term>
          <listitem>
            <para>
              Set environment variable NAME to VALUE. Note: not all
              environment variables can be set this way, because some are
              read before parsing the command line. INCDIR, SADIR, <link linkend="CommandEnvironment"><citetitle>SFDIR</citetitle></link>,
              and <link linkend="CommandEnvironment"><citetitle>SSDIR</citetitle></link> are known to work.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusEnvPlusEquals">
          <term>--env:NAME+=VALUE<indexterm id="IndexMinusEnvPlusEquals"><primary>--env:NAME+=VALUE</primary></indexterm></term>
          <listitem>
            <para>
              Append VALUE to ';' separated list of search paths in
              environment variable NAME (should be INCDIR, SADIR, <link linkend="CommandEnvironment"><citetitle>SFDIR</citetitle></link>,
              or <link linkend="CommandEnvironment"><citetitle>SSDIR</citetitle></link>). If a file is found in multiple directories, the
              last will be used.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusExpressionOpt">
          <term>--expression-opt<indexterm id="IndexMinusExpressionOpt"><primary>--expression-opt</primary></indexterm></term>
          <listitem>
            <para>
                  <emphasis>Note that this option has no affect in
                  csound6.</emphasis>

              <emphasis>In Csound 5 only.</emphasis>
              Turns on some optimizations in expressions:
              <itemizedlist>
                <listitem><para>Redundant assignment operations are eliminated whenever
                    possible. This means that for example this line
                    a1 = a2 + a3
                    will compile as
                    a1 Add a2, a3
                    instead of
                    #a0 Add a2, a3
                    a1 = #a0
                    saving a temporary variable and an opcode call. Less opcode
                    calls result in reduced CPU usage (an average orchestra may
                    compile about 10% faster with --expression-opt, but it
                    depends largely on how many expressions are used, what the
                    control rate is (see also below), etc.; thus, the difference
                    may be less, but also much more).</para></listitem>

                <listitem><para>number of a- and k-rate temporary variables is significantly
                    reduced. This expression</para>
                  <programlisting>
                    (a1 + a2 + a3 + a4)</programlisting>

                  <para>will compile as</para>

                  <programlisting>
                    #a0 Add a1, a2
                    #a0 Add #a0, a3
                    #a0 Add #a0, a4       ; (the result is in #a0)</programlisting>

                  <para>instead of</para>

                  <programlisting>
                    #a0 Add a1, a2
                    #a1 Add #a0, a3
                    #a2 Add #a1, a4       ; (the result is in #a2)</programlisting>

                  <para>The advantages of less temporary variables are:</para>

                  <itemizedlist>
                    <listitem><simpara>less cache memory is used, which may improve performance
                        of orchestras with many a-rate expressions and a low
                        control rate (e.g. ksmps = 100)</simpara></listitem>
                    <listitem><simpara>large orchestras may load faster due to less different
                        identifier names</simpara></listitem>
                    <listitem>
                      <simpara>index overflow errors (i.e. when messages like this
                        Case2: indx=-56004 (ffff253c); (short)indx = 9532 (253c)
                        are printed and odd behavior or a Csound crash occurs) may
                        be fixed, because such errors are triggered by too many
                        different (especially a-rate) variable names in a single
                        instrument.</simpara>
                    </listitem>

                  </itemizedlist>

                  <para>Note that this optimization (due to technical reasons) is not
                  performed on i-rate temporary variables.</para>
                </listitem>

              </itemizedlist>

              <warning>
                <title>Warning</title>
                <para>
                  When --expression-opt is turned on, it is not allowed to use the i()
                  function with an expression argument, and relying on the value of
                  k-rate expressions at i-time is unsafe.
                </para>
              </warning>

            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusUpperF">
          <term>-F FILE<indexterm id="IndexMinusUpperF"><primary>-F</primary></indexterm>, --midifile=FILE<indexterm id="IndexMinusMidifile"><primary>--midifile</primary></indexterm></term>
          <listitem>
            <para>
              Read MIDI events from MIDI file <emphasis>FILE</emphasis>.
              The file should have only one track in Csound versions 4.xx and
              earlier; this limitation is removed in Csound 5.00.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusLowerF">
          <term>-f<indexterm id="IndexMinusLowerF"><primary>-f</primary></indexterm>, --format=float<indexterm id="IndexMinusFormatFloat"><primary>--format=float</primary></indexterm></term>
          <listitem>
            <para>
              Use single-format float audio samples (not playable on some systems, but can be read by <link linkend="FlagsMinusLowerI"><citetitle>-i</citetitle></link>, <link linkend="soundin"><citetitle>soundin</citetitle></link> and <link linkend="GEN01"><citetitle>GEN01</citetitle></link>
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusUpperG">
          <term>-G<indexterm id="IndexMinusUpperG"><primary>-G</primary></indexterm>, --postscriptdisplay<indexterm id="IndexMinusPostscriptdisplay"><primary>--postscriptdisplay</primary></indexterm></term>
          <listitem>
            <para>
              Suppress graphics, use PostScript displays instead.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusLowerG">
          <term>-g<indexterm id="IndexMinusLowerG"><primary>-g</primary></indexterm>, --asciidisplay<indexterm id="IndexMinusAsciidisplay"><primary>--asciidisplay</primary></indexterm></term>
          <listitem>
            <para>
              Suppress graphics, use ASCII displays instead.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusMinusgetsr">
          <term>--get-system-sr<indexterm id="IndexMinusMinusgetsr"><primary>--get-system-sr</primary></indexterm></term>
          <listitem>
            <para>
              prints system sr and exits, requires -o dac.
            </para>
          </listitem>
          </varlistentry>

      <varlistentry id="FlagsMinusUpperH">
          <term>-H#<indexterm id="IndexMinusUpperH"><primary>-H</primary></indexterm>, --heartbeat=NUM<indexterm id="IndexMinusHeartbeat"><primary>--heartbeat</primary></indexterm></term>
          <listitem>
            <para>
              Print a heartbeat after each soundfile buffer write:
              <itemizedlist>
                <listitem><para>no NUM, a rotating bar.</para></listitem>
                <listitem><para>NUM = 1, a rotating bar.</para></listitem>
                <listitem><para>NUM = 2, a dot (.)</para></listitem>
                <listitem><para>NUM = 3, filesize in seconds.</para></listitem>
                <listitem><para>NUM = 4, sound a bell.</para></listitem>
              </itemizedlist>
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusLowerH">
          <term>-h<indexterm id="IndexMinusLowerH"><primary>-h</primary></indexterm>, --noheader<indexterm id="IndexMinusNoheader"><primary>--noheader</primary></indexterm></term>
          <listitem>
            <para>
              No header on output soundfile.
              Don't write a file header, just binary samples.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusHelp">
          <term>--help<indexterm id="IndexMinusHelp"><primary>--help</primary></indexterm></term>
          <listitem>
            <para>
              Display on-line help message.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusUpperI">
          <term>-I<indexterm id="IndexMinusUpperI"><primary>-I</primary></indexterm>, --i-only<indexterm id="IndexMinusIonly"><primary>--i-only</primary></indexterm></term>
          <listitem>
            <para>
              <emphasis>i-time only.</emphasis> Allocate and initialize all instruments as per the score, but skip all p-time processing (no k-signals or a-signals, and thus no amplitudes and no sound). Provides a fast validity check of the score pfields and orchestra i-variables.  This option is exclusive of the --syntax-check-only flag.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusLowerI">
          <term>-i FILE<indexterm id="IndexMinusLowerI"><primary>-i</primary></indexterm>, --input=FILE<indexterm id="IndexMinusInput"><primary>--input</primary></indexterm></term>
          <listitem>
            <para>
              Input soundfile name. If not a full pathname, the file will be sought first in the current directory, then in that given by the environment variable <link linkend="CommandEnvironment"><citetitle>SSDIR</citetitle></link> (if defined), then by <link linkend="CommandEnvironment"><citetitle>SFDIR</citetitle></link>. The name <emphasis>stdin</emphasis> will cause audio to be read from standard input.
            </para>
            <para>
              The name <emphasis>devaudio</emphasis> or <emphasis>adc</emphasis> will request sound from the host audio input device. It is possible to select a device number by appending an integer value in the range 0 to 1023, or a device name separated by a : character (e.g. -iadc3, -iadc:hw:1,1). It depends on the host audio interface whether a device number or a name should be used. In the first case, an out of range number usually results in an error and listing the valid device numbers.
            </para>
            <para>
              The audio coming in using <emphasis>-i</emphasis> can be received using opcodes like <link linkend="inch"><citetitle>inch</citetitle></link>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusPlusIdArtist">
          <term>-+id_artist=string<indexterm id="IndexMinusPlusIdArtist"><primary>-+id_artist</primary></indexterm></term>
          <listitem>
            <para>
              (max. length = 200 characters) Artist tag in output soundfile (no spaces)
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusPlusIdComment">
          <term>-+id_comment=string<indexterm id="IndexMinusPlusIdComment"><primary>-+id_comment</primary></indexterm></term>
          <listitem>
            <para>
              (max. length = 200 characters) Comment tag in output soundfile (no spaces)
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusPlusIdCopyright">
          <term>-+id_copyright=string<indexterm id="IndexMinusPlusIdCopyright"><primary>-+id_copyright</primary></indexterm></term>
          <listitem>
            <para>
              (max. length = 200 characters) Copyright tag in output soundfile (no spaces)
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusPlusIdSCopyright">
          <term>-+id_scopyright=integer<indexterm id="IndexMinusPlusIdSCopyright"><primary>-+id_scopyright</primary></indexterm></term>
          <listitem>
            <para>
             (Since version 6.05) Simple copyright/licence encoded as
             an integer.  Coding is:
             <simplelist>
               <member>0: "All rights reserved" (default)</member>
               <member>1: "Creative Commons Attribution-NonCommercial-NoDerivatives (CC BY-NC-ND)"</member>
               <member>2: "Creative Commons Attribution-NonCommercial-ShareAlike (CC BY-NC-SA)"</member>
               <member>3: "Creative Commons Attribution-NonCommercial (CC BY-NC)"</member>
               <member>4: "Creative Commons Attribution-NoDerivatives (CC BY-ND)"</member>
               <member>5: "Creative Commons Attribution-ShareAlike (CC BY-SA)"</member>
               <member>6: "Creative Commons Attribution-ShareAlike (CC BY)"</member>
               <member>7: "Licenced under BSD"</member>
             </simplelist>
            </para>
         </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusPlusIdDate">
          <term>-+id_date=string<indexterm id="IndexMinusPlusIdDate"><primary>-+id_date</primary></indexterm></term>
          <listitem>.
            <para>
              (max. length = 200 characters) Date tag in output soundfile (no spaces)
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusPlusIdSoftware">
          <term>-+id_software=string<indexterm id="IndexMinusPlusIdSoftware"><primary>-+id_software</primary></indexterm></term>
          <listitem>
            <para>
              (max. length = 200 characters) Software tag in output soundfile (no spaces)
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusPlusIdTitle">
          <term>-+id_title=string<indexterm id="IndexMinusPlusIdTitle"><primary>-+id_title</primary></indexterm></term>
          <listitem>
            <para>
              (max. length = 200 characters) Title tag in output soundfile (no spaces)
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusPlusIgnoreCsopts">
          <term>-+ignore_csopts=integer<indexterm id="IndexMinusPlusIgnoreCsopts"><primary>-+ignore_csopts=</primary></indexterm></term>
          <listitem>
            <para>
              If set to 1, Csound will ignore all options specified in the csd file's CsOptions section. See <link linkend="CommandUnifile"><citetitle>Unified File Format for Orchestras and Scores</citetitle></link>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusPlusInputStream">
          <term>-+input_stream=string<indexterm id="IndexMinusPlusInputStream"><primary>-+input_stream</primary></indexterm></term>
          <listitem>
            <para>
              Pulseaudio input stream name.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusUpperJ">
          <term>-J<indexterm id="IndexMinusUpperJ"><primary>-J</primary></indexterm>, --ircam<indexterm id="IndexMinusIrcam"><primary>--ircam</primary></indexterm>, --format=ircam<indexterm id="IndexMinusFIrcam"><primary>--format=ircam</primary></indexterm></term>
          <listitem>
            <para>
              Write an IRCAM format soundfile.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusLowerJ">
          <term>-j NUM<indexterm id="IndexMinusLowerJ"><primary>-j NUM</primary></indexterm></term>
          <listitem>
            <para>
              Make <emphasis>NUM</emphasis> processes available for
              rendering.  This is only advantageous if the number of
              processors on the computer is more that the number
              of requested processes.  It also may slow rendering
              down if ksmps is too small. 
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusPlusJackClient">
          <term>-+jack_client=[client_name]<indexterm id="IndexMinusPlusJackClient"><primary>-+jack_client</primary></indexterm></term>
          <listitem>
            <para>
              The client name used by Csound, defaults to 'csound5'.
              If multiple instances of Csound connect to the JACK server,
              different client names need to be used to avoid name
              conflicts. (Linux and Mac OS X only)
            </para>
          </listitem>
        </varlistentry>
        <varlistentry id="IndexMinusPlusJackPortname">
          <term>-+jack_inportname=[input port name prefix], -+jack_outportname=[output port name prefix]
            <indexterm id="IndexMinusPlusJackInportname"><primary>-+jack_inportname</primary></indexterm>
            <indexterm id="IndexMinusPlusJackOutportname"><primary>-+jack_outportname</primary></indexterm></term>
          <listitem>
            <para>
              Name prefix of Csound JACK input/output ports; the default is
              'input' and 'output'. The actual port name is the channel number
              appended to the name prefix. (Linux and Mac OS X only)
            </para>
            <para>
              Example: with the above default settings, a stereo orchestra will
              create these ports in full duplex operation:
              <screen>
                csound5:input1              (record left)
                csound5:input2              (record right)
                csound5:output1             (playback left)
                csound5:output2             (playback right)</screen>
            </para>
          </listitem>
        </varlistentry>
        
        <varlistentry id="FlagsMinusUpperK">
          <term>-K<indexterm id="IndexMinusUpperK"><primary>-K</primary></indexterm>, --nopeaks<indexterm id="IndexMinusNopeaks"><primary>--nopeaks</primary></indexterm></term>
          <listitem>
            <para>
              Do not generate any PEAK chunks.
            </para>
          </listitem>
        </varlistentry>
        
        <varlistentry id="FlagsMinusLowerK">
          <term>-k NUM<indexterm id="IndexMinusLowerK"><primary>-k</primary></indexterm>, --control-rate=NUM<indexterm id="IndexMinusControlrate"><primary>--control-rate</primary></indexterm></term>
          <listitem>
            <para>
              Override the control rate (<link linkend="kr"><citetitle>KR</citetitle></link>) supplied by the orchestra.
            </para>
          </listitem>
        </varlistentry>
        
        <varlistentry id="FlagsMinusUpperL">
          <term>-L DEVICE<indexterm id="IndexMinusUpperL"><primary>-L</primary></indexterm>, --score-in=DEVICE<indexterm id="IndexMinusScorein"><primary>--score-in</primary></indexterm></term>
          <listitem>
            <para>
              Read line-oriented real-time score events from device <emphasis>DEVICE</emphasis>. The name <emphasis>stdin</emphasis> will permit score events to be typed at your terminal, or piped from another process. Each line-event is terminated by a carriage-return. Events are coded just like those in a <emphasis>standard numeric score</emphasis>, except that an event with p2=0 will be performed immediately, and an event with p2=T will be performed T seconds after arrival. Events can arrive at any time, and in any order. The score <emphasis>carry</emphasis> feature is legal here, as are held notes (p3 negative) and string arguments, but ramps and <emphasis>pp</emphasis> or <emphasis>np</emphasis> references are not.
            </para>
	<note>
	  <para>
	    The -L flag is only valid on *NIX systems which have pipes. It doesn't work on Windows.
	  </para>
	</note>
          </listitem>
        </varlistentry>
        
        <varlistentry id="FlagsMinusLowerL">
          <term>-l<indexterm id="IndexMinusLowerL"><primary>-l</primary></indexterm>, --format=long<indexterm id="IndexMinusFormatLong"><primary>--format=long</primary></indexterm></term>
          <listitem>
            <para>
              Use long integer audio samples.
            </para>
          </listitem>
        </varlistentry>
        
        <varlistentry id="FlagsMinusUpperM">
          <term>-M DEVICE<indexterm id="IndexMinusUpperM"><primary>-M</primary></indexterm>, --midi-device=DEVICE<indexterm id="IndexMinusMididevice"><primary>--midi-device</primary></indexterm></term>
          <listitem>
            <para>
                Read MIDI events from device <emphasis>DEVICE</emphasis>. If using ALSA MIDI (-+rtmidi=alsa), devices are selected by name and not number. So, you need to use an option like -M hw:CARD,DEVICE where CARD and DEVICE are the card and device numbers (e.g. -M hw:1,0). In the case of PortMidi and MME, DEVICE should be a number, and if it is out of range, an error occurs and the valid device numbers are printed.When using PortMidi, you can use '-Ma' to enable all devices. This is also convenient when you don't have devices as it will not generate an error.
            </para>
          </listitem>
        </varlistentry>
        
        <varlistentry id="FlagsMinusLowerM">
          <term>-m NUM<indexterm id="IndexMinusLowerM"><primary>-m</primary></indexterm>, --messagelevel=NUM<indexterm id="IndexMinusMessagelevel"><primary>--messagelevel</primary></indexterm></term>
          <listitem>
            <para>
              Message level for standard (terminal) output. Takes the <emphasis>sum</emphasis> of any of the following values:
              
              <itemizedlist>
                <listitem><para>1 = note amplitude messages</para></listitem>
                <listitem><para>2 = samples out of range message</para></listitem>
                <listitem><para>4 = warning messages</para></listitem>
                <listitem><para>128 = print benchmark information</para></listitem>
              </itemizedlist>
              
              And exactly one of these to select note amplitude format:
              
              <itemizedlist>
                <listitem><para>0 = raw amplitudes, no colours</para></listitem>
                <listitem><para>32 = dB, no colors</para></listitem>
                <listitem><para>64 = dB, out of range highlighted with red</para></listitem>
                <listitem><para>96 = dB, all colors</para></listitem>
                <listitem><para>256 = raw, out of range highlighted with red</para></listitem>
                <listitem><para>512 = raw, all colours</para></listitem>
              </itemizedlist>
              
              The default is 135 (128+4+2+1), which means all messages, raw
              amplitude values, and printing elapsed time at the end of
              performance.  The coloring of raw amplitudes was introduced
              in version 5.04.
              
            </para>
            
          </listitem>
        </varlistentry>
        
        <varlistentry id="FlagsMinusLowerMA">
          <term>--m-amps=NUM<indexterm id="IndexMinusLowerMA"/></term>
          <listitem>
            <para>
              Message level for amplitudes on standard (terminal) output. 
              <itemizedlist>
                <listitem><para>0 = no note amplitude messages</para></listitem>
                <listitem><para>1 = note amplitude messages</para></listitem>
              </itemizedlist>
            </para>
          </listitem>
        </varlistentry>
        
        <varlistentry id="FlagsMinusLowerMR">
          <term>--m-range=NUM<indexterm id="IndexMinusLowerMR"/></term>
          <listitem>
            <para>
              Message level for out of range messages on standard (terminal) output. 
              <itemizedlist>
                <listitem><para>0 = no samples out of range message</para></listitem>
                <listitem><para>1 = samples out of range message</para></listitem>
              </itemizedlist>
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusLowerMW">
          <term>--m-warnings=NUM<indexterm id="IndexMinusLowerMW"/></term>
          <listitem>
            <para>
              Message level for warnings on standard (terminal) output. 
              <itemizedlist>
                <listitem><para>0 = no warning messages</para></listitem>
                <listitem><para>1 = warning messages</para></listitem>
              </itemizedlist>
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusLowerMD">
          <term>--m-dB=NUM<indexterm id="IndexMinusLowerMD"/></term>
          <listitem>
            <para>
              Message level for amplitude format on standard (terminal) output. 
              <itemizedlist>
                <listitem><para>0 = absolute amplitude messages</para></listitem>
                <listitem><para>1 = dB amplitude messages</para></listitem>
              </itemizedlist>
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusLowerMC">
          <term>--m-colours=NUM<indexterm id="IndexMinusLowerMC"/></term>
          <listitem>
            <para>
              Message level for amplitude format on standard (terminal) output. 
              <itemizedlist>
                <listitem><para>0 = no colouring of amplitude messages</para></listitem>
                <listitem><para>1 = colouring of amplitude messages</para></listitem>
              </itemizedlist>
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusLowerMB">
          <term>--m-benchmarks=NUM<indexterm id="IndexMinusLowerMB"/></term>
          <listitem>
            <para>
              Message level for benchmark information on standard (terminal) output. 
              <itemizedlist>
                <listitem><para>0 = no benchnark numbers</para></listitem>
                <listitem><para>1 = print benchnark numbers</para></listitem>
              </itemizedlist>
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusPlusMaxStrLen">
          <term>-+max_str_len=integer<indexterm id="IndexMinusPlusMaxStrLen"><primary>-+max_str_len</primary></indexterm></term>
          <listitem>
            <para>
              (min: 10, max: 10000) Maximum length of string variables + 1;
              defaults to 256 allowing a length of 255 characters. The length of
              string constants is not limited by this parameter.
            </para>
          </listitem>
        </varlistentry>

            <varlistentry id="FlagsMinusMinusMidiDevices">
          <term>--midi-devices[=x]<indexterm id="IndexMinusMinusMidiDevices"><primary>--midi-devices</primary></indexterm></term>
          <listitem>
            <para>
             list midi devices (x=out, output devices only; x=in,
	      input; else input and output) and exit.
            </para>
          </listitem>
          </varlistentry>

        <varlistentry id="FlagsMidiKey">
          <term>--midi-key=N<indexterm id="IndexMidiKey"><primary>--midi-key=N</primary></indexterm></term>
          <listitem>
            <para>
              Route MIDI note on message key number to pfield N as
              MIDI value [0-127].
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMidiKeyCps">
          <term>--midi-key-cps=N<indexterm id="IndexMidiKeyCps"><primary>--midi-key-cps=N</primary></indexterm></term>
          <listitem>
            <para>
              Route MIDI note on message key number to pfield N
              as cycles per second.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMidiKeyOct">
          <term>--midi-key-oct=N<indexterm id="IndexMidiKeyOct"><primary>--midi-key-oct=N</primary></indexterm></term>
          <listitem>
            <para>
              Route MIDI note on message key number to pfield
              N as linear octave.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMidiKeyPch">
          <term>--midi-key-pch=N<indexterm id="IndexMidiKeyPch"><primary>--midi-key-pch=N</primary></indexterm></term>
          <listitem>
            <para>
              Route MIDI note on message key number to
              pfield N as oct.pch (pitch class).
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMidiVelocity">
          <term>--midi-velocity=N<indexterm id="IndexMidiVelocity"><primary>--midi-velocity=N</primary></indexterm></term>
          <listitem>
            <para>
              Route MIDI note on message velocity number to pfield
              N as MIDI value [0-127].
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMidiKeyAmp">
          <term>--midi-velocity-amp=N<indexterm id="IndexMidiKeyAmp"><primary>--midi-velocity-amp=N</primary></indexterm></term>
          <listitem>
            <para>
              Route MIDI note on message velocity number to pfield
              N as amplitude [0-0dbFS].
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusMidiOutFile">
          <term>--midioutfile=FILENAME<indexterm id="IndexMinusMidiOutFile"><primary>--midioutfile</primary></indexterm></term>
          <listitem>
            <para>
              Save MIDI output to a file (Csound 5.00 and later only).
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusPlusMsgColor">
          <term>-+msg_color=boolean<indexterm id="IndexMinusPlusMsgColor"><primary>-+msg_color</primary></indexterm></term>
          <listitem>
            <para>
              Enable message attributes (colors etc.); might need to be disabled on some terminals which print strange characters instead of modifying text attributes. default: true.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusPlusMuteTracks">
          <term>-+mute_tracks=string<indexterm id="IndexMinusPlusMuteTracks"><primary>-+mute_tracks</primary></indexterm></term>
          <listitem>
            <para>
              (max. length = 255 characters) Ignore events (other than
              tempo changes) in MIDI file tracks defined by pattern (for
              example, -+mute_tracks=00101 will mute the third and fifth
              tracks).
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusUpperN">
          <term>-N<indexterm id="IndexMinusUpperN"><primary>-N</primary></indexterm>, --notify<indexterm id="IndexMinusNotify"><primary>--notify</primary></indexterm></term>
          <listitem>
            <para>
              Notify (ring the bell) when score or MIDI track is done.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusLowerN">
          <term>-n<indexterm id="IndexMinusLowerN"><primary>-n</primary></indexterm>, --nosound<indexterm id="IndexMinusNosound"><primary>--nosound</primary></indexterm></term>
          <listitem>
            <para>
              No sound. Do all processing, but bypass writing of sound to disk. This flag does not change the execution in any other way.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusNumthread">
          <term>--num-threads=NUM<indexterm id="IndexMinusNumthread"><primary>--num-thread=NUM</primary></indexterm></term>
          <listitem>
            <para>
              Make <emphasis>NUM</emphasis> processes available for
              rendering.  This is only advantageous if the number of
              processors on the computer is more that the number
              of requested processes.  It also may slow rendering
              down if ksmps is too small. 
            </para>
          </listitem>
        </varlistentry>

        
        <varlistentry id="FlagsMinusNoDefaultPaths">
          <term>--no-default-paths<indexterm id="IndexMinusNoDefaultPaths"><primary>--no-default-paths</primary></indexterm></term>
          <listitem>
            <para>
              Disables adding of directory of CSD/ORC/SCO to search paths.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusNoExpressionOpt">
          <term>--no-expression-opt<indexterm id="IndexMinusNoExpressionOpt"><primary>--no-expression-opt</primary></indexterm></term>
          <listitem>
            <para>
              Disables expression optimization.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusUpperO">
          <term>-O FILE<indexterm id="IndexMinusUpperO"><primary>-O</primary></indexterm>, --logfile=FILE<indexterm id="IndexMinusLogfile"><primary>--logfile</primary></indexterm></term>
          <listitem>
            <para>
              Log output to file <emphasis>FILE</emphasis>. If
              <emphasis>FILE</emphasis> is null (i.e. <emphasis>-O
              null</emphasis> or <emphasis>--logfile=null</emphasis>)
              all printing of messages to the console is disabled.
              <note>This option only works from the command line and
              not from .csound6rc or a CsOptions section of a csd
              file.  It needs to be acted upon before sound proper
              starts.  It is ignored in .csoundrc and
              CsOptions.</note>
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusLowerO">
          <term>-o FILE<indexterm id="IndexMinusLowerO"><primary>-o</primary></indexterm>, --output=FILE<indexterm id="IndexMinusOutput"><primary>--output</primary></indexterm></term>
          <listitem>
            <para>
              Output soundfile name. If not a full pathname, the soundfile will be placed in the directory given by the environment variable <link linkend="CommandEnvironment"><citetitle>SFDIR</citetitle></link> (if defined), else in the current directory. The name <emphasis>stdout</emphasis> will cause audio to be written to standard output, while <emphasis>null</emphasis> results in no sound output similarly to the -n flag. If no name is given, the default name will be <emphasis>test</emphasis>.
            </para>
            <para>
              The name <emphasis>devaudio</emphasis> or <emphasis>dac</emphasis> (you can use <emphasis>-odac</emphasis> or <emphasis>-o dac</emphasis>) will request writing sound to the host audio output device. It is possible to select a device number by appending an integer value in the range 0 to 1023, or a device name separated by a : character (e.g. -odac3, -odac:hw:1,1). It depends on the host audio interface whether a device number or a name should be used. In the first case, an out of range number usually results in an error and listing the valid device numbers.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusMinusOgg">
          <term>--ogg<indexterm id="IndexMinusMinusOgg"><primary>--ogg</primary></indexterm></term>
          <listitem>
            <para>
              Set output file format to ogg.  (csound 5.18 and later)
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusOmacro">
          <term>--omacro:XXX=YYY<indexterm id="IndexMinusOmacro"><primary>--omacro</primary></indexterm></term>
          <listitem>
            <para>
              Set orchestra macro XXX to value YYY
            </para>
          </listitem>
        </varlistentry>

      <varlistentry id="FlagsMinusOpcodeLib">
	<term>--opcode-lib=LIBNAME<indexterm id="IndexMinusOpcodeLib"><primary>--opcode-lib</primary></indexterm></term>
	<listitem>
	  <para>
	    Load plugin library <emphasis>LIBNAME</emphasis>.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry id="FlagMinuMinusOrc">
	<term>--orc orcname<indexterm id="IndexMinusMinusOrc"><primary>--orc</primary></indexterm></term>
	<listitem>
	  <para>
	    Set the argument as the orchestrra file.  Used when not
            score is required&gt;.  (Csound 5.18 and later).
	  </para>
	</listitem>
      </varlistentry>

	    <varlistentry id="FlagsMinusMinusKsmps">
          <term>--ksmps=N<indexterm id="IndexMinusMinusKsmps"><primary>--ksmps</primary></indexterm></term>
          <listitem>
            <para>
              Set ksmps override to N (6.05 and later).
            </para>
          </listitem>
        </varlistentry>
      
      
      <varlistentry id="FlagsMinusPlusOutputStream">
        <term>-+output_stream=string<indexterm id="IndexMinusPlusOutputStream"><primary>-+output_stream</primary></indexterm></term>
        <listitem>
          <para>
            Pulseaudio output stream name.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry id="FlagsMinusPort">
        <term>--port=N<indexterm id="IndexMinusPprt"><primary>--port</primary></indexterm></term> 
        <listitem>
          <para>
            Set UDP port on which to listen instruments/orchestra code
            (implies --daemon) 
          </para>
        </listitem>
      </varlistentry>


      <varlistentry id="FlagsMinusUpperQ">
        <term>-Q DEVICE<indexterm id="IndexMinusUpperQ"><primary>-Q</primary></indexterm></term> 
        <listitem>
          <para>
            Enables MIDI OUT operations to device id
            <emphasis>DEVICE</emphasis>. This flag allows parallel
            MIDI OUT and DAC performance. Unfortunately the real-time
            timing implemented in Csound is completely managed by DAC
            buffer sample flow. So MIDI OUT operations can present
            some time irregularities. These irregularities can be
            reduced by using a lower value for the <link linkend="FlagsMinusLowerB"><citetitle>-b</citetitle></link>
            flag. 
            </para>
            <para>
              If using ALSA MIDI (-+rtmidi=alsa), devices are selected by name and not number. So, you need to use an option like -Q hw:CARD,DEVICE where CARD and DEVICE are the card and device numbers (e.g. -Q hw:1,0). In the case of PortMidi and MME, DEVICE should be a number, and if it is out of range, an error occurs and the valid device numbers are printed.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusUpperR">
          <term>-R<indexterm id="IndexMinusUpperR"><primary>-R</primary></indexterm>, --rewrite<indexterm id="IndexMinusRewrite"><primary>--rewrite</primary></indexterm></term>
          <listitem>
            <para>
              Continually rewrite the header while writing the soundfile (WAV/AIFF).
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusLowerR">
          <term>-r NUM<indexterm id="IndexMinusLowerR"><primary>-r</primary></indexterm>, --sample-rate=NUM<indexterm id="IndexMinusSamplerate"><primary>--sample-rate</primary></indexterm></term>
          <listitem>
            <para>
              Override the sampling rate (<link linkend="sr"><citetitle>SR</citetitle></link>) supplied by the orchestra.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusPlusRawControlerMode">
          <term>-+raw_controller_mode=boolean<indexterm id="IndexMinusRawControllerMode"><primary>-+raw_controller_mode</primary></indexterm></term>
          <listitem>
            <para>
              Disable special handling of MIDI controllers like sustain
              pedal, all notes off etc., allowing the use of all the 128
              controllers for any purpose. This will also set the initial value
              of all controllers to zero.  Default: no.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusRealtime">
          <term>--realtime<indexterm id="IndexMinusRealtime"><primary>--realtime</primary></indexterm></term>
          <listitem>
            <para>
              realtime priority mode is switched on which the following effects:
              <orderedlist>
                <listitem>
                  <simpara>all opcode audio file reading/writing is handled asynchronously
                  by a separate thread.</simpara>
                </listitem>
                <listitem>
                  <simpara>all init-pass operations are also performed asynchronously.</simpara>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
        </varlistentry>
           
        <varlistentry id="FlagsMinusPlusRtaudio">
          <term>-+rtaudio=string<indexterm id="IndexMinusRtaudio"><primary>-+rtaudio</primary></indexterm></term>
          <listitem>
            <para>
              (max. length = 20 characters) Real time audio module name.
              The default is PortAudio. Also available, depending on platform and build options: Linux: alsa, jack; Windows: mme; Mac OS X: CoreAudio. In addition, null can be used on all platforms, to disable the use of any real time audio plugin.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusPlusRtmidi">
          <term>-+rtmidi=string<indexterm id="IndexMinusRtmidi"><primary>-+rtmidi</primary></indexterm></term>
          <listitem>
            <para>
              (max. length = 20 characters) Real time MIDI module name.
              Defaults to PortMidi, other options (depending on build options): Linux: alsa; Windows: mme, winmm. In addition, null can be used on all platforms, to disable the use of any real time MIDI plugin.
            </para>
            <para>ALSA MIDI devices are selected by name and not number. So, you
              need to use an option like -M hw:CARD,DEVICE where CARD and
              DEVICE are the card and device numbers (e.g. -M hw:1,0).
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusLowerS">
          <term>-s<indexterm id="IndexMinusLowerS"><primary>-s</primary></indexterm>, --format=short<indexterm id="IndexMinusFormatShort"><primary>--format=short</primary></indexterm></term>
          <listitem>
            <para>
              Use short integer audio samples.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsSampleAccurate">
          <term>--sample-accurate<indexterm id="IndexSampleAccurate"><primary>--sample-accurate</primary></indexterm></term>
          <listitem>
            <para>
              Start and stop instances of instruments at the nearest
              sample to the requested time.  This is in contrast to
              traditional Csound which rounds the times to the nearest
              k-cycle.  Note that this does not work with tied notes.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusSched">
          <term>--sched<indexterm id="IndexMinusSched"><primary>--sched</primary></indexterm></term>
          <listitem>
            <para>
              <emphasis>Linux only.</emphasis> Use real-time scheduling and lock memory. (Also requires <link linkend="FlagsMinusLowerD"><citetitle>-d</citetitle></link> and either <link linkend="FlagsMinusLowerO"><citetitle>-o dac</citetitle></link> or <link linkend="FlagsMinusLowerO"><citetitle>-o devaudio</citetitle></link>).
              See also --sched=N below.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusSchedN">
          <term>--sched=N<indexterm id="IndexMinusSchedN"><primary>--sched=N</primary></indexterm></term>
          <listitem>
            <para>
              <emphasis>Linux only.</emphasis>
              Same as --sched, but allows specifying a priority value: if N
              is positive (in the range 1 to 99) the scheduling policy
              SCHED_RR will be used with a priority of N; otherwise,
              SCHED_OTHER is used with the nice level set to N.
              Can also be used in the format --sched=N,MAXCPU,TIME to enable the
              use of a "watchdog" thread that terminates Csound if the average CPU
              usage exceeds MAXCPU percents over a peroid of TIME seconds (new in
              Csound 5.00).
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusPlusServer">
          <term>-+server=string<indexterm id="IndexMinusPlusServer"><primary>-+server</primary></indexterm></term>
          <listitem>
            <para>
              Pulseaudio server name.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusPlusSkipSeconds">
          <term>-+skip_seconds=float<indexterm id="IndexMinusSkipSecons"><primary>-+skip_seconds</primary></indexterm></term>
          <listitem>
            <para>
              (min: 0) Start playback at the specified time (in seconds),
              skipping earlier events in the score and MIDI file.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusSmacro">
          <term>--smacro:XXX=YYY<indexterm id="IndexMinusSmacro"><primary>--smacro</primary></indexterm></term>
          <listitem>
            <para>
              Set score macro XXX to value YYY
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusStrset">
          <term>--strset<indexterm id="IndexMinusStrset"><primary>--strset</primary></indexterm></term>
          <listitem>
            <para>
              <emphasis>Csound 5.</emphasis>
              The --strset option allows setting strset string values from
              the command line, in the format '--strsetN=VALUE'. It is
              useful for passing parameters to the orchestra (e.g. file
              names).
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusSyntaxCheckOnly">
          <term>--syntax-check-only<indexterm id="IndexMinusSyntaxCheckOnly"><primary>--syntax-check-only</primary></indexterm></term>
          <listitem>
            <para>
              Causes Csound to exit immediately after the orchestra and score parsers finish checking the syntax of the input files and before the orchestra performs the score.  This option is exclusive of the --i-only flag.  (Csound 5.08 and later).
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusUpperT">
          <term>-T<indexterm id="IndexMinusUpperT"><primary>-T</primary></indexterm>, --terminate-on-midi<indexterm id="IndexMinusTerminateonmidi"><primary>--terminate-on-midi</primary></indexterm></term>
          <listitem>
            <para>
              Terminate the performance when the end of MIDI file is reached.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusLowerT0">
          <term>-t0<indexterm id="IndexMinusLowerT0"><primary>-t0</primary></indexterm>, --keep-sorted-score<indexterm id="IndexMinusKeepsortedscore"><primary>--keep-sorted-score</primary></indexterm></term>
          <listitem>
            <para>
              Prevents Csound from deleting the sorted score file, score.srt, upon exit.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusLowerT">
          <term>-t NUM<indexterm id="IndexMinusLowerT"><primary>-t</primary></indexterm>, --tempo=NUM<indexterm id="IndexMinusTempo"><primary>--tempo=NUM</primary></indexterm></term>
          <listitem>
            <para>
              Use the uninterpreted beats of <emphasis>score.srt</emphasis> for this performance, and set the initial tempo at <emphasis>NUM</emphasis> beats per minute. When this flag is set, the tempo of score performance is also controllable from within the orchestra. WARNING: this mode of operation is experimental and may be unreliable.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusUpperU">
          <term>-U UTILITY<indexterm id="IndexMinusUpperU"><primary>-U</primary></indexterm>, --utility=UTILITY<indexterm id="IndexMinusUtility"><primary>--utility</primary></indexterm></term>
          <listitem>
            <para>
              Invoke the utility program <emphasis>UTILITY</emphasis>. Use any
              invalid name to list the available utilities.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusLowerU">
          <term>-u<indexterm id="IndexMinusLowerU"><primary>-u</primary></indexterm>,
            --format=ulaw<indexterm id="IndexMinusFormatUlaw"><primary>--format=ulaw</primary></indexterm></term>
          <listitem>
            <para>
              Use u-law audio samples.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusMinusVBR">
          <term>--vbr-quality=X<indexterm id="IndexMinusMinusVBR"><primary>--vbr-quality=X</primary></indexterm></term>
          <listitem>
            <para>
              Set variable bit-rate quality for output to ogg.  (Csound 6.03 and later).
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusLowerV">
          <term>-v<indexterm id="IndexMinusLowerV"><primary>-v</primary></indexterm>, --verbose<indexterm id="IndexMinusVerbose"><primary>--verbose</primary></indexterm></term>
          <listitem>
            <para>
              Verbose translate and run. Prints details of orch translation and performance, enabling errors to be more clearly located.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusUpperW">
          <term>-W<indexterm id="IndexMinusUpperW"><primary>-W</primary></indexterm>, --wave<indexterm id="IndexMinusWave"><primary>--wave</primary></indexterm>, --format=wave<indexterm id="IndexMinusFWave"><primary>--format=wave</primary></indexterm></term>
          <listitem>
            <para>
              Write a WAV format soundfile.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusLowerX">
          <term>-x FILE<indexterm id="IndexMinusLowerX"><primary>-x</primary></indexterm>, --extract-score=FILE<indexterm id="IndexMinusExtractscore"><primary>--extract-score</primary></indexterm></term>
          <listitem>
            <para>
              Extract a portion of the sorted score, score.srt, using the extract file <emphasis>FILE</emphasis> (see <link linkend="commandpreextract"><citetitle>Extract</citetitle></link>).
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusUpperZ">
          <term>-Z<indexterm id="IndexMinusUpperZ"><primary>-Z</primary></indexterm>, --dither<indexterm id="IndexMinusDither"><primary>--dither</primary></indexterm></term>
          <listitem>
            <para>
              Switch on dithering of audio conversion from internal
              floating point to 32, 16 and 8-bit formats.  The default
              form of the dither is triangular.  
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusUpperZd">
          <term>-Z<indexterm id="IndexMinusUpperZd"><primary>-Zd</primary></indexterm>, --dither--triangular<indexterm id="IndexMinusDitherTrangular"><primary>--dither--triangular</primary></indexterm>, --dither--uniform<indexterm id="IndexMinusDitherUniform"><primary>--dither--uniform</primary></indexterm></term>
          <listitem>
            <para>
              Switch on dithering of audio conversion from internal
              floating point to 32, 16 and 8-bit formats.  In the case
              of -Z the next digit should be a 1 (for trangular) or a
              2 (for uniform).  The exact interpretation depends on
              the output system.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry id="FlagsMinusLowerZ">
          <term>-z NUM<indexterm id="IndexMinusLowerZ"><primary>-z</primary></indexterm>, --list-opcodesNUM<indexterm id="IndexMinusListopcodes"><primary>--list-opcodesNUM</primary></indexterm></term>
          <listitem>
            <para>
              List opcodes in this version:
              <itemizedlist>
                <listitem><para>no NUM, just show names</para></listitem>
                <listitem><para>NUM = 0, just show names</para></listitem>
                <listitem><para>NUM = 1, show arguments to each opcode using the format &lt;opname&gt; &lt;outargs&gt; &lt;inargs&gt;</para></listitem>
                <listitem><para>NUM = 2, show names including
                deprecated ones</para></listitem>
                <listitem><para>NUM = 3, show arguments to each
                opcode, including deprecated ones, using the format &lt;opname&gt; &lt;outargs&gt; &lt;inargs&gt;</para></listitem>
              </itemizedlist>
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </refsect1>
  </refentry><!-- </section> -->
